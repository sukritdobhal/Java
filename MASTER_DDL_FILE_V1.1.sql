-------------------------------------------------------------------------------------------------------------------------------------------------------
 --  Subject    : DDL OF DBXNET FOR FOSS MIGRATION PROJECT

 --------------------------------------------------------------------------------------
 --  change history
 --  name:       date:        tag:            description:
 --  -----       -----        ----            ------------
 -- SUKRIT		02/20/24	-SD--              FIRST DRAFT.
 -- SUKRIT      02/20/24                       RAN ON SIT.
 --SUKRIT       02/21/24     -<SD02/21/24>--    REVISIONS AFTER ATUL'S --REVIEW
 -- SUKRIT      02/22/24     --<SD02/22>--      CATEGORIZATION OF TABLES
 -------------------------------------------------------------------
 
--<SD 02/20>-----
 ALTER SESSION SET CURRENT_SCHEMA = DBXNET;
 -------------------------------------------------------------------
 --<SD02/22>--
 --CATEGORY 1 : FOSS TABLES TO DBXNET AS IS.
 -- THIS WILL BE MIGRATED WITH STRUCTURE AND DATA.
 -- DBSIGB.DBSI_M;
 --------------------------------------------------------------------
  DROP TABLE DBXNET.DBSI_M;
 ---------------------------------------------------------------------
 CREATE TABLE DBXNET.DBSI_M AS SELECT * FROM DBSIGB.DBSI_M;
 
 --------------------------------------------------------------------

CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."DBSI_MV" ("DB_NAME_KEY", "DB_NAME", "DB_PASSW", "DB_MAINT", "ORDAT_SEQUENCE") AS 
  SELECT
DB_NAME_KEY,
DB_NAME,
DB_PASSW,
DB_MAINT,
ORDAT_SEQUENCE
FROM DBSI_M;
--------------------------------------------------------------------
DROP TABLE DBXNET.DBVG11_KNN_M;
---------------------------------------------------------------------
CREATE TABLE DBXNET.DBVG11_KNN_M AS SELECT * FROM DBVG11.KNN_M;
----------------------------------------------------------------
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBXNET"."DBVG11_KNN_MV" ("KON_SL_GES", "KON_TEXT_TAB_1", "KON_TEXT_TAB_2", "KON_TEXT_TAB_3", "KON_TEXT_TAB_4", "KON_TEXT_TAB_5", "KON_TEXT_TAB_6", "KON_TEXT_TAB_7", "KON_TEXT_TAB_8", "KON_TEXT_TAB_9", "KON_TEXT_TAB_10", "KON_TEXT_TAB_11", "KON_TEXT_TAB_12", "KON_TEXT_TAB_13", "KON_TEXT_TAB_14", "KON_TEXT_TAB_15", "KON_TEXT_TAB_16", "KON_TEXT_TAB_17", "KON_TEXT_TAB_18", "KON_TEXT_TAB_19", "KON_TEXT_TAB_20", "KON_TEXT_TAB_21", "KON_TEXT_TAB_22", "KON_TEXT_TAB_23", "KON_TEXT_TAB_24", "KON_TEXT_TAB_25", "KON_TEXT_TAB_26", "KON_TEXT_TAB_27", "KON_TEXT_TAB_28", "KON_TEXT_TAB_29", "KON_TEXT_TAB_30", "KON_TEXT_TAB_31", "KON_TEXT_TAB_32", "KON_TEXT_TAB_33", "KON_TEXT_TAB_34", "KON_TEXT_TAB_35", "KON_TEXT_TAB_36", "KON_TEXT_TAB_37", "KON_TEXT_TAB_38", "KON_TEXT_TAB_39", "KON_TEXT_TAB_40", "KON_TEXT_TAB_41", "KON_TEXT_TAB_42", "KON_TEXT_TAB_43", "KON_TEXT_TAB_44", "KON_TEXT_TAB_45", "KON_TEXT_TAB_46", "KON_TEXT_TAB_47", "KON_TEXT_TAB_48", "KON_TEXT_TAB_49", "KON_TEXT_TAB_50", "LETZT_AEND", "USERX", "STAT_KZ", "RESERVE_X30", "ORDAT_SEQUENCE") AS 
  SELECT
KON_SL_GES,
KON_TEXT_TAB_1,
KON_TEXT_TAB_2,
KON_TEXT_TAB_3,
KON_TEXT_TAB_4,
KON_TEXT_TAB_5,
KON_TEXT_TAB_6,
KON_TEXT_TAB_7,
KON_TEXT_TAB_8,
KON_TEXT_TAB_9,
KON_TEXT_TAB_10,
KON_TEXT_TAB_11,
KON_TEXT_TAB_12,
KON_TEXT_TAB_13,
KON_TEXT_TAB_14,
KON_TEXT_TAB_15,
KON_TEXT_TAB_16,
KON_TEXT_TAB_17,
KON_TEXT_TAB_18,
KON_TEXT_TAB_19,
KON_TEXT_TAB_20,
KON_TEXT_TAB_21,
KON_TEXT_TAB_22,
KON_TEXT_TAB_23,
KON_TEXT_TAB_24,
KON_TEXT_TAB_25,
KON_TEXT_TAB_26,
KON_TEXT_TAB_27,
KON_TEXT_TAB_28,
KON_TEXT_TAB_29,
KON_TEXT_TAB_30,
KON_TEXT_TAB_31,
KON_TEXT_TAB_32,
KON_TEXT_TAB_33,
KON_TEXT_TAB_34,
KON_TEXT_TAB_35,
KON_TEXT_TAB_36,
KON_TEXT_TAB_37,
KON_TEXT_TAB_38,
KON_TEXT_TAB_39,
KON_TEXT_TAB_40,
KON_TEXT_TAB_41,
KON_TEXT_TAB_42,
KON_TEXT_TAB_43,
KON_TEXT_TAB_44,
KON_TEXT_TAB_45,
KON_TEXT_TAB_46,
KON_TEXT_TAB_47,
KON_TEXT_TAB_48,
KON_TEXT_TAB_49,
KON_TEXT_TAB_50,
LETZT_AEND,
USERX,
STAT_KZ,
RESERVE_X30,
ORDAT_SEQUENCE
FROM DBVG11_KNN_M;
-------------------------------------------------------------------
DROP TABLE DBXNET.DBVG12_KNN_M;
--------------------------------------------------------------------
CREATE TABLE DBXNET.DBVG12_KNN_M AS SELECT * FROM DBVG12.KNN_M;
---------------------------------------------------------------------
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBXNET"."DBVG12_KNN_MV" ("KON_SL_GES", "KON_TEXT_TAB_1", "KON_TEXT_TAB_2", "KON_TEXT_TAB_3", "KON_TEXT_TAB_4", "KON_TEXT_TAB_5", "KON_TEXT_TAB_6", "KON_TEXT_TAB_7", "KON_TEXT_TAB_8", "KON_TEXT_TAB_9", "KON_TEXT_TAB_10", "KON_TEXT_TAB_11", "KON_TEXT_TAB_12", "KON_TEXT_TAB_13", "KON_TEXT_TAB_14", "KON_TEXT_TAB_15", "KON_TEXT_TAB_16", "KON_TEXT_TAB_17", "KON_TEXT_TAB_18", "KON_TEXT_TAB_19", "KON_TEXT_TAB_20", "KON_TEXT_TAB_21", "KON_TEXT_TAB_22", "KON_TEXT_TAB_23", "KON_TEXT_TAB_24", "KON_TEXT_TAB_25", "KON_TEXT_TAB_26", "KON_TEXT_TAB_27", "KON_TEXT_TAB_28", "KON_TEXT_TAB_29", "KON_TEXT_TAB_30", "KON_TEXT_TAB_31", "KON_TEXT_TAB_32", "KON_TEXT_TAB_33", "KON_TEXT_TAB_34", "KON_TEXT_TAB_35", "KON_TEXT_TAB_36", "KON_TEXT_TAB_37", "KON_TEXT_TAB_38", "KON_TEXT_TAB_39", "KON_TEXT_TAB_40", "KON_TEXT_TAB_41", "KON_TEXT_TAB_42", "KON_TEXT_TAB_43", "KON_TEXT_TAB_44", "KON_TEXT_TAB_45", "KON_TEXT_TAB_46", "KON_TEXT_TAB_47", "KON_TEXT_TAB_48", "KON_TEXT_TAB_49", "KON_TEXT_TAB_50", "LETZT_AEND", "USERX", "STAT_KZ", "RESERVE_X30", "ORDAT_SEQUENCE") AS 
  SELECT
KON_SL_GES,
KON_TEXT_TAB_1,
KON_TEXT_TAB_2,
KON_TEXT_TAB_3,
KON_TEXT_TAB_4,
KON_TEXT_TAB_5,
KON_TEXT_TAB_6,
KON_TEXT_TAB_7,
KON_TEXT_TAB_8,
KON_TEXT_TAB_9,
KON_TEXT_TAB_10,
KON_TEXT_TAB_11,
KON_TEXT_TAB_12,
KON_TEXT_TAB_13,
KON_TEXT_TAB_14,
KON_TEXT_TAB_15,
KON_TEXT_TAB_16,
KON_TEXT_TAB_17,
KON_TEXT_TAB_18,
KON_TEXT_TAB_19,
KON_TEXT_TAB_20,
KON_TEXT_TAB_21,
KON_TEXT_TAB_22,
KON_TEXT_TAB_23,
KON_TEXT_TAB_24,
KON_TEXT_TAB_25,
KON_TEXT_TAB_26,
KON_TEXT_TAB_27,
KON_TEXT_TAB_28,
KON_TEXT_TAB_29,
KON_TEXT_TAB_30,
KON_TEXT_TAB_31,
KON_TEXT_TAB_32,
KON_TEXT_TAB_33,
KON_TEXT_TAB_34,
KON_TEXT_TAB_35,
KON_TEXT_TAB_36,
KON_TEXT_TAB_37,
KON_TEXT_TAB_38,
KON_TEXT_TAB_39,
KON_TEXT_TAB_40,
KON_TEXT_TAB_41,
KON_TEXT_TAB_42,
KON_TEXT_TAB_43,
KON_TEXT_TAB_44,
KON_TEXT_TAB_45,
KON_TEXT_TAB_46,
KON_TEXT_TAB_47,
KON_TEXT_TAB_48,
KON_TEXT_TAB_49,
KON_TEXT_TAB_50,
LETZT_AEND,
USERX,
STAT_KZ,
RESERVE_X30,
ORDAT_SEQUENCE
FROM DBVG12_KNN_M;
---------------------------------------------------------------------
DROP TABLE DBXNET.DBVGFE_KNN_M;
-----------------------------------------------------------------------
CREATE TABLE DBXNET.DBVGFE_KNN_M AS SELECT * FROM DBVGFE.KNN_M;
-----------------------------------------------------------------------
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBXNET"."DBVGFE_KNN_MV" ("KON_SL_GES", "KON_TEXT_TAB_1", "KON_TEXT_TAB_2", "KON_TEXT_TAB_3", "KON_TEXT_TAB_4", "KON_TEXT_TAB_5", "KON_TEXT_TAB_6", "KON_TEXT_TAB_7", "KON_TEXT_TAB_8", "KON_TEXT_TAB_9", "KON_TEXT_TAB_10", "KON_TEXT_TAB_11", "KON_TEXT_TAB_12", "KON_TEXT_TAB_13", "KON_TEXT_TAB_14", "KON_TEXT_TAB_15", "KON_TEXT_TAB_16", "KON_TEXT_TAB_17", "KON_TEXT_TAB_18", "KON_TEXT_TAB_19", "KON_TEXT_TAB_20", "KON_TEXT_TAB_21", "KON_TEXT_TAB_22", "KON_TEXT_TAB_23", "KON_TEXT_TAB_24", "KON_TEXT_TAB_25", "KON_TEXT_TAB_26", "KON_TEXT_TAB_27", "KON_TEXT_TAB_28", "KON_TEXT_TAB_29", "KON_TEXT_TAB_30", "KON_TEXT_TAB_31", "KON_TEXT_TAB_32", "KON_TEXT_TAB_33", "KON_TEXT_TAB_34", "KON_TEXT_TAB_35", "KON_TEXT_TAB_36", "KON_TEXT_TAB_37", "KON_TEXT_TAB_38", "KON_TEXT_TAB_39", "KON_TEXT_TAB_40", "KON_TEXT_TAB_41", "KON_TEXT_TAB_42", "KON_TEXT_TAB_43", "KON_TEXT_TAB_44", "KON_TEXT_TAB_45", "KON_TEXT_TAB_46", "KON_TEXT_TAB_47", "KON_TEXT_TAB_48", "KON_TEXT_TAB_49", "KON_TEXT_TAB_50", "LETZT_AEND", "USERX", "STAT_KZ", "RESERVE_X30", "ORDAT_SEQUENCE") AS 
  SELECT
KON_SL_GES,
KON_TEXT_TAB_1,
KON_TEXT_TAB_2,
KON_TEXT_TAB_3,
KON_TEXT_TAB_4,
KON_TEXT_TAB_5,
KON_TEXT_TAB_6,
KON_TEXT_TAB_7,
KON_TEXT_TAB_8,
KON_TEXT_TAB_9,
KON_TEXT_TAB_10,
KON_TEXT_TAB_11,
KON_TEXT_TAB_12,
KON_TEXT_TAB_13,
KON_TEXT_TAB_14,
KON_TEXT_TAB_15,
KON_TEXT_TAB_16,
KON_TEXT_TAB_17,
KON_TEXT_TAB_18,
KON_TEXT_TAB_19,
KON_TEXT_TAB_20,
KON_TEXT_TAB_21,
KON_TEXT_TAB_22,
KON_TEXT_TAB_23,
KON_TEXT_TAB_24,
KON_TEXT_TAB_25,
KON_TEXT_TAB_26,
KON_TEXT_TAB_27,
KON_TEXT_TAB_28,
KON_TEXT_TAB_29,
KON_TEXT_TAB_30,
KON_TEXT_TAB_31,
KON_TEXT_TAB_32,
KON_TEXT_TAB_33,
KON_TEXT_TAB_34,
KON_TEXT_TAB_35,
KON_TEXT_TAB_36,
KON_TEXT_TAB_37,
KON_TEXT_TAB_38,
KON_TEXT_TAB_39,
KON_TEXT_TAB_40,
KON_TEXT_TAB_41,
KON_TEXT_TAB_42,
KON_TEXT_TAB_43,
KON_TEXT_TAB_44,
KON_TEXT_TAB_45,
KON_TEXT_TAB_46,
KON_TEXT_TAB_47,
KON_TEXT_TAB_48,
KON_TEXT_TAB_49,
KON_TEXT_TAB_50,
LETZT_AEND,
USERX,
STAT_KZ,
RESERVE_X30,
ORDAT_SEQUENCE
FROM DBVGFE_KNN_M;
-----------------------------------------------------------------
DROP TABLE DBXNET.TTD_D;

CREATE TABLE DBXNET.TTD_D AS SELECT * FROM DBUSTA.TTD_D;

-- ALTER TABLE "DBXNET"."TTD_D" ADD CONSTRAINT "TDA_M01C" FOREIGN KEY ("IDENTNR")
	  -- REFERENCES "DBXNET"."TDA_M" ("IDENTNR") ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "DBXNET"."TTD_D_01_GUTB_MTD" 
AFTER INSERT OR UPDATE
ON DBXNET.TTD_D
FOR EACH ROW
BEGIN
IF SUBSTR (:NEW.SA_VG, 1, 2) = 'T '
THEN
UPDATE DBSTMT.TNST_M
SET UPD_KZ = ' '
WHERE TEILENR = SUBSTR (:NEW.SA_VG, 3, 12);
ELSE
IF SUBSTR (:NEW.SA_VG, 1, 2) = 'KD'
THEN
UPDATE DBSTMT.KDU_M
SET FA_UPD_KZ = SUBSTR (FA_UPD_KZ, 1, 6)
WHERE     FA_KTO_NR LIKE '%' || SUBSTR (:NEW.SA_VG, 3, 8)
AND FA_KTO_NR NOT LIKE 'HU %';
END IF;
END IF;
END TTD_D_01_GUTB_MTD;

ALTER TRIGGER "DBXNET"."TTD_D_01_GUTB_MTD" ENABLE;



CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."TTD_DV" ("IDENTNR", "SA_IDENTNR_VG", "SA_VG", "IDENTBEZ", "WERT_VON", "WERT_BIS", "ABW_PROZ", "ABW_KZ", "MENGENSCHL", "LETZT_AEND", "USERX", "STAT_KZ", "RESSTEUKZ", "SORT_FOLGE", "SATZ_ART", "KATEGORIE", "MINUS_TOLERANZ", "PLUS_TOLERANZ", "TEXT_10X30_1", "TEXT_10X30_2", "TEXT_10X30_3", "TEXT_10X30_4", "TEXT_10X30_5", "TEXT_10X30_6", "TEXT_10X30_7", "TEXT_10X30_8", "TEXT_10X30_9", "TEXT_10X30_10", "TEXT_10X30_11", "TEXT_10X30_12", "TEXT_10X30_13", "TEXT_10X30_14", "TEXT_10X30_15", "TEXT_10X30_16", "TEXT_10X30_17", "TEXT_10X30_18", "TEXT_10X30_19", "TEXT_10X30_20", "TEXT_10X30_21", "TEXT_10X30_22", "TEXT_10X30_23", "TEXT_10X30_24", "TEXT_10X30_25", "TEXT_10X30_26", "TEXT_10X30_27", "TEXT_10X30_28", "TEXT_10X30_29", "TEXT_10X30_30", "TEXT_10X30_31", "TEXT_10X30_32", "TEXT_10X30_33", "TEXT_10X30_34", "TEXT_10X30_35", "TEXT_10X30_36", "TEXT_10X30_37", "TEXT_10X30_38", "TEXT_10X30_39", "TEXT_10X30_40", "TEXT_10X30_41", "TEXT_10X30_42", "TEXT_10X30_43", "TEXT_10X30_44", "TEXT_10X30_45", "TEXT_10X30_46", "TEXT_10X30_47", "TEXT_10X30_48", "TEXT_10X30_49", "TEXT_10X30_50", "SA_TEILENR", "RESSTEUKZ30", "ORDAT_SEQUENCE") AS 
  SELECT
IDENTNR,
SA_IDENTNR_VG,
SA_VG,
IDENTBEZ,
WERT_VON/1000000,
WERT_BIS/1000000,
ABW_PROZ/100,
ABW_KZ,
MENGENSCHL,
LETZT_AEND,
USERX,
STAT_KZ,
RESSTEUKZ,
SORT_FOLGE,
SATZ_ART,
KATEGORIE,
MINUS_TOLERANZ/1000000,
PLUS_TOLERANZ/1000000,
TEXT_10X30_1,
TEXT_10X30_2,
TEXT_10X30_3,
TEXT_10X30_4,
TEXT_10X30_5,
TEXT_10X30_6,
TEXT_10X30_7,
TEXT_10X30_8,
TEXT_10X30_9,
TEXT_10X30_10,
TEXT_10X30_11,
TEXT_10X30_12,
TEXT_10X30_13,
TEXT_10X30_14,
TEXT_10X30_15,
TEXT_10X30_16,
TEXT_10X30_17,
TEXT_10X30_18,
TEXT_10X30_19,
TEXT_10X30_20,
TEXT_10X30_21,
TEXT_10X30_22,
TEXT_10X30_23,
TEXT_10X30_24,
TEXT_10X30_25,
TEXT_10X30_26,
TEXT_10X30_27,
TEXT_10X30_28,
TEXT_10X30_29,
TEXT_10X30_30,
TEXT_10X30_31,
TEXT_10X30_32,
TEXT_10X30_33,
TEXT_10X30_34,
TEXT_10X30_35,
TEXT_10X30_36,
TEXT_10X30_37,
TEXT_10X30_38,
TEXT_10X30_39,
TEXT_10X30_40,
TEXT_10X30_41,
TEXT_10X30_42,
TEXT_10X30_43,
TEXT_10X30_44,
TEXT_10X30_45,
TEXT_10X30_46,
TEXT_10X30_47,
TEXT_10X30_48,
TEXT_10X30_49,
TEXT_10X30_50,
SA_TEILENR,
RESSTEUKZ30,
ORDAT_SEQUENCE
FROM TTD_D;

--------------------------------------------------------------------
CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."TX78_DV" ("TEXT_NR_GES", "ZUS_TEXT_78", "TEXT78_IND", "LETZT_AEND", "USERX", "STAT_KZ", "TX_SUCHBEGRIFF", "ORDAT_SEQUENCE") AS 
  SELECT
TEXT_NR_GES,
ZUS_TEXT_78,
TEXT78_IND,
LETZT_AEND,
USERX,
STAT_KZ,
TX_SUCHBEGRIFF,
ORDAT_SEQUENCE
FROM TX78_D;


-------------------------------------------------------------------
DROP TABLE DBXNET.DBVGFR_KNN_M;
-----------------------------------------------------------------------
CREATE TABLE DBXNET.DBVGFR_KNN_M AS SELECT * FROM DBVGFR.KNN_M;
--------------------------------------------------------------------
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBXNET"."DBVGFR_KNN_MV" ("KON_SL_GES", "KON_TEXT_TAB_1", "KON_TEXT_TAB_2", "KON_TEXT_TAB_3", "KON_TEXT_TAB_4", "KON_TEXT_TAB_5", "KON_TEXT_TAB_6", "KON_TEXT_TAB_7", "KON_TEXT_TAB_8", "KON_TEXT_TAB_9", "KON_TEXT_TAB_10", "KON_TEXT_TAB_11", "KON_TEXT_TAB_12", "KON_TEXT_TAB_13", "KON_TEXT_TAB_14", "KON_TEXT_TAB_15", "KON_TEXT_TAB_16", "KON_TEXT_TAB_17", "KON_TEXT_TAB_18", "KON_TEXT_TAB_19", "KON_TEXT_TAB_20", "KON_TEXT_TAB_21", "KON_TEXT_TAB_22", "KON_TEXT_TAB_23", "KON_TEXT_TAB_24", "KON_TEXT_TAB_25", "KON_TEXT_TAB_26", "KON_TEXT_TAB_27", "KON_TEXT_TAB_28", "KON_TEXT_TAB_29", "KON_TEXT_TAB_30", "KON_TEXT_TAB_31", "KON_TEXT_TAB_32", "KON_TEXT_TAB_33", "KON_TEXT_TAB_34", "KON_TEXT_TAB_35", "KON_TEXT_TAB_36", "KON_TEXT_TAB_37", "KON_TEXT_TAB_38", "KON_TEXT_TAB_39", "KON_TEXT_TAB_40", "KON_TEXT_TAB_41", "KON_TEXT_TAB_42", "KON_TEXT_TAB_43", "KON_TEXT_TAB_44", "KON_TEXT_TAB_45", "KON_TEXT_TAB_46", "KON_TEXT_TAB_47", "KON_TEXT_TAB_48", "KON_TEXT_TAB_49", "KON_TEXT_TAB_50", "LETZT_AEND", "USERX", "STAT_KZ", "RESERVE_X30", "ORDAT_SEQUENCE") AS 
  SELECT
KON_SL_GES,
KON_TEXT_TAB_1,
KON_TEXT_TAB_2,
KON_TEXT_TAB_3,
KON_TEXT_TAB_4,
KON_TEXT_TAB_5,
KON_TEXT_TAB_6,
KON_TEXT_TAB_7,
KON_TEXT_TAB_8,
KON_TEXT_TAB_9,
KON_TEXT_TAB_10,
KON_TEXT_TAB_11,
KON_TEXT_TAB_12,
KON_TEXT_TAB_13,
KON_TEXT_TAB_14,
KON_TEXT_TAB_15,
KON_TEXT_TAB_16,
KON_TEXT_TAB_17,
KON_TEXT_TAB_18,
KON_TEXT_TAB_19,
KON_TEXT_TAB_20,
KON_TEXT_TAB_21,
KON_TEXT_TAB_22,
KON_TEXT_TAB_23,
KON_TEXT_TAB_24,
KON_TEXT_TAB_25,
KON_TEXT_TAB_26,
KON_TEXT_TAB_27,
KON_TEXT_TAB_28,
KON_TEXT_TAB_29,
KON_TEXT_TAB_30,
KON_TEXT_TAB_31,
KON_TEXT_TAB_32,
KON_TEXT_TAB_33,
KON_TEXT_TAB_34,
KON_TEXT_TAB_35,
KON_TEXT_TAB_36,
KON_TEXT_TAB_37,
KON_TEXT_TAB_38,
KON_TEXT_TAB_39,
KON_TEXT_TAB_40,
KON_TEXT_TAB_41,
KON_TEXT_TAB_42,
KON_TEXT_TAB_43,
KON_TEXT_TAB_44,
KON_TEXT_TAB_45,
KON_TEXT_TAB_46,
KON_TEXT_TAB_47,
KON_TEXT_TAB_48,
KON_TEXT_TAB_49,
KON_TEXT_TAB_50,
LETZT_AEND,
USERX,
STAT_KZ,
RESERVE_X30,
ORDAT_SEQUENCE
FROM DBVGFR_KNN_M;
--------------------------------------------------------------------
DROP TABLE DBXNET.DBVGHU_KNN_M;
-----------------------------------------------------------------------
CREATE TABLE DBXNET.DBVGHU_KNN_M AS SELECT * FROM DBVGHU.KNN_M;
------------------------------------------------------------------
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBXNET"."DBVGHU_KNN_MV" ("KON_SL_GES", "KON_TEXT_TAB_1", "KON_TEXT_TAB_2", "KON_TEXT_TAB_3", "KON_TEXT_TAB_4", "KON_TEXT_TAB_5", "KON_TEXT_TAB_6", "KON_TEXT_TAB_7", "KON_TEXT_TAB_8", "KON_TEXT_TAB_9", "KON_TEXT_TAB_10", "KON_TEXT_TAB_11", "KON_TEXT_TAB_12", "KON_TEXT_TAB_13", "KON_TEXT_TAB_14", "KON_TEXT_TAB_15", "KON_TEXT_TAB_16", "KON_TEXT_TAB_17", "KON_TEXT_TAB_18", "KON_TEXT_TAB_19", "KON_TEXT_TAB_20", "KON_TEXT_TAB_21", "KON_TEXT_TAB_22", "KON_TEXT_TAB_23", "KON_TEXT_TAB_24", "KON_TEXT_TAB_25", "KON_TEXT_TAB_26", "KON_TEXT_TAB_27", "KON_TEXT_TAB_28", "KON_TEXT_TAB_29", "KON_TEXT_TAB_30", "KON_TEXT_TAB_31", "KON_TEXT_TAB_32", "KON_TEXT_TAB_33", "KON_TEXT_TAB_34", "KON_TEXT_TAB_35", "KON_TEXT_TAB_36", "KON_TEXT_TAB_37", "KON_TEXT_TAB_38", "KON_TEXT_TAB_39", "KON_TEXT_TAB_40", "KON_TEXT_TAB_41", "KON_TEXT_TAB_42", "KON_TEXT_TAB_43", "KON_TEXT_TAB_44", "KON_TEXT_TAB_45", "KON_TEXT_TAB_46", "KON_TEXT_TAB_47", "KON_TEXT_TAB_48", "KON_TEXT_TAB_49", "KON_TEXT_TAB_50", "LETZT_AEND", "USERX", "STAT_KZ", "RESERVE_X30", "ORDAT_SEQUENCE") AS 
  SELECT
KON_SL_GES,
KON_TEXT_TAB_1,
KON_TEXT_TAB_2,
KON_TEXT_TAB_3,
KON_TEXT_TAB_4,
KON_TEXT_TAB_5,
KON_TEXT_TAB_6,
KON_TEXT_TAB_7,
KON_TEXT_TAB_8,
KON_TEXT_TAB_9,
KON_TEXT_TAB_10,
KON_TEXT_TAB_11,
KON_TEXT_TAB_12,
KON_TEXT_TAB_13,
KON_TEXT_TAB_14,
KON_TEXT_TAB_15,
KON_TEXT_TAB_16,
KON_TEXT_TAB_17,
KON_TEXT_TAB_18,
KON_TEXT_TAB_19,
KON_TEXT_TAB_20,
KON_TEXT_TAB_21,
KON_TEXT_TAB_22,
KON_TEXT_TAB_23,
KON_TEXT_TAB_24,
KON_TEXT_TAB_25,
KON_TEXT_TAB_26,
KON_TEXT_TAB_27,
KON_TEXT_TAB_28,
KON_TEXT_TAB_29,
KON_TEXT_TAB_30,
KON_TEXT_TAB_31,
KON_TEXT_TAB_32,
KON_TEXT_TAB_33,
KON_TEXT_TAB_34,
KON_TEXT_TAB_35,
KON_TEXT_TAB_36,
KON_TEXT_TAB_37,
KON_TEXT_TAB_38,
KON_TEXT_TAB_39,
KON_TEXT_TAB_40,
KON_TEXT_TAB_41,
KON_TEXT_TAB_42,
KON_TEXT_TAB_43,
KON_TEXT_TAB_44,
KON_TEXT_TAB_45,
KON_TEXT_TAB_46,
KON_TEXT_TAB_47,
KON_TEXT_TAB_48,
KON_TEXT_TAB_49,
KON_TEXT_TAB_50,
LETZT_AEND,
USERX,
STAT_KZ,
RESERVE_X30,
ORDAT_SEQUENCE
FROM DBVGHU_KNN_M;
---------------------------------------------------------------------
DROP TABLE DBXNET.DBVGMI_KNN_M;
-----------------------------------------------------------------------
CREATE TABLE DBXNET.DBVGMI_KNN_M AS SELECT * FROM DBVGMI.KNN_M;
----------------------------------------------------------

CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBXNET"."DBVGMI_KNN_MV" ("KON_SL_GES", "KON_TEXT_TAB_1", "KON_TEXT_TAB_2", "KON_TEXT_TAB_3", "KON_TEXT_TAB_4", "KON_TEXT_TAB_5", "KON_TEXT_TAB_6", "KON_TEXT_TAB_7", "KON_TEXT_TAB_8", "KON_TEXT_TAB_9", "KON_TEXT_TAB_10", "KON_TEXT_TAB_11", "KON_TEXT_TAB_12", "KON_TEXT_TAB_13", "KON_TEXT_TAB_14", "KON_TEXT_TAB_15", "KON_TEXT_TAB_16", "KON_TEXT_TAB_17", "KON_TEXT_TAB_18", "KON_TEXT_TAB_19", "KON_TEXT_TAB_20", "KON_TEXT_TAB_21", "KON_TEXT_TAB_22", "KON_TEXT_TAB_23", "KON_TEXT_TAB_24", "KON_TEXT_TAB_25", "KON_TEXT_TAB_26", "KON_TEXT_TAB_27", "KON_TEXT_TAB_28", "KON_TEXT_TAB_29", "KON_TEXT_TAB_30", "KON_TEXT_TAB_31", "KON_TEXT_TAB_32", "KON_TEXT_TAB_33", "KON_TEXT_TAB_34", "KON_TEXT_TAB_35", "KON_TEXT_TAB_36", "KON_TEXT_TAB_37", "KON_TEXT_TAB_38", "KON_TEXT_TAB_39", "KON_TEXT_TAB_40", "KON_TEXT_TAB_41", "KON_TEXT_TAB_42", "KON_TEXT_TAB_43", "KON_TEXT_TAB_44", "KON_TEXT_TAB_45", "KON_TEXT_TAB_46", "KON_TEXT_TAB_47", "KON_TEXT_TAB_48", "KON_TEXT_TAB_49", "KON_TEXT_TAB_50", "LETZT_AEND", "USERX", "STAT_KZ", "RESERVE_X30", "ORDAT_SEQUENCE") AS 
  SELECT
KON_SL_GES,
KON_TEXT_TAB_1,
KON_TEXT_TAB_2,
KON_TEXT_TAB_3,
KON_TEXT_TAB_4,
KON_TEXT_TAB_5,
KON_TEXT_TAB_6,
KON_TEXT_TAB_7,
KON_TEXT_TAB_8,
KON_TEXT_TAB_9,
KON_TEXT_TAB_10,
KON_TEXT_TAB_11,
KON_TEXT_TAB_12,
KON_TEXT_TAB_13,
KON_TEXT_TAB_14,
KON_TEXT_TAB_15,
KON_TEXT_TAB_16,
KON_TEXT_TAB_17,
KON_TEXT_TAB_18,
KON_TEXT_TAB_19,
KON_TEXT_TAB_20,
KON_TEXT_TAB_21,
KON_TEXT_TAB_22,
KON_TEXT_TAB_23,
KON_TEXT_TAB_24,
KON_TEXT_TAB_25,
KON_TEXT_TAB_26,
KON_TEXT_TAB_27,
KON_TEXT_TAB_28,
KON_TEXT_TAB_29,
KON_TEXT_TAB_30,
KON_TEXT_TAB_31,
KON_TEXT_TAB_32,
KON_TEXT_TAB_33,
KON_TEXT_TAB_34,
KON_TEXT_TAB_35,
KON_TEXT_TAB_36,
KON_TEXT_TAB_37,
KON_TEXT_TAB_38,
KON_TEXT_TAB_39,
KON_TEXT_TAB_40,
KON_TEXT_TAB_41,
KON_TEXT_TAB_42,
KON_TEXT_TAB_43,
KON_TEXT_TAB_44,
KON_TEXT_TAB_45,
KON_TEXT_TAB_46,
KON_TEXT_TAB_47,
KON_TEXT_TAB_48,
KON_TEXT_TAB_49,
KON_TEXT_TAB_50,
LETZT_AEND,
USERX,
STAT_KZ,
RESERVE_X30,
ORDAT_SEQUENCE
FROM DBVGMI_KNN_M;
-----------------------------------------------------------
---------------------------------------------------------------------
DROP TABLE DBXNET.DBVGMS_KNN_M;
-----------------------------------------------------------------------
CREATE TABLE DBXNET.DBVGMS_KNN_M AS SELECT * FROM DBVGMS.KNN_M;
----------------------------------------------------------
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBXNET"."DBVGMS_KNN_MV" ("KON_SL_GES", "KON_TEXT_TAB_1", "KON_TEXT_TAB_2", "KON_TEXT_TAB_3", "KON_TEXT_TAB_4", "KON_TEXT_TAB_5", "KON_TEXT_TAB_6", "KON_TEXT_TAB_7", "KON_TEXT_TAB_8", "KON_TEXT_TAB_9", "KON_TEXT_TAB_10", "KON_TEXT_TAB_11", "KON_TEXT_TAB_12", "KON_TEXT_TAB_13", "KON_TEXT_TAB_14", "KON_TEXT_TAB_15", "KON_TEXT_TAB_16", "KON_TEXT_TAB_17", "KON_TEXT_TAB_18", "KON_TEXT_TAB_19", "KON_TEXT_TAB_20", "KON_TEXT_TAB_21", "KON_TEXT_TAB_22", "KON_TEXT_TAB_23", "KON_TEXT_TAB_24", "KON_TEXT_TAB_25", "KON_TEXT_TAB_26", "KON_TEXT_TAB_27", "KON_TEXT_TAB_28", "KON_TEXT_TAB_29", "KON_TEXT_TAB_30", "KON_TEXT_TAB_31", "KON_TEXT_TAB_32", "KON_TEXT_TAB_33", "KON_TEXT_TAB_34", "KON_TEXT_TAB_35", "KON_TEXT_TAB_36", "KON_TEXT_TAB_37", "KON_TEXT_TAB_38", "KON_TEXT_TAB_39", "KON_TEXT_TAB_40", "KON_TEXT_TAB_41", "KON_TEXT_TAB_42", "KON_TEXT_TAB_43", "KON_TEXT_TAB_44", "KON_TEXT_TAB_45", "KON_TEXT_TAB_46", "KON_TEXT_TAB_47", "KON_TEXT_TAB_48", "KON_TEXT_TAB_49", "KON_TEXT_TAB_50", "LETZT_AEND", "USERX", "STAT_KZ", "RESERVE_X30", "ORDAT_SEQUENCE") AS 
  SELECT
KON_SL_GES,
KON_TEXT_TAB_1,
KON_TEXT_TAB_2,
KON_TEXT_TAB_3,
KON_TEXT_TAB_4,
KON_TEXT_TAB_5,
KON_TEXT_TAB_6,
KON_TEXT_TAB_7,
KON_TEXT_TAB_8,
KON_TEXT_TAB_9,
KON_TEXT_TAB_10,
KON_TEXT_TAB_11,
KON_TEXT_TAB_12,
KON_TEXT_TAB_13,
KON_TEXT_TAB_14,
KON_TEXT_TAB_15,
KON_TEXT_TAB_16,
KON_TEXT_TAB_17,
KON_TEXT_TAB_18,
KON_TEXT_TAB_19,
KON_TEXT_TAB_20,
KON_TEXT_TAB_21,
KON_TEXT_TAB_22,
KON_TEXT_TAB_23,
KON_TEXT_TAB_24,
KON_TEXT_TAB_25,
KON_TEXT_TAB_26,
KON_TEXT_TAB_27,
KON_TEXT_TAB_28,
KON_TEXT_TAB_29,
KON_TEXT_TAB_30,
KON_TEXT_TAB_31,
KON_TEXT_TAB_32,
KON_TEXT_TAB_33,
KON_TEXT_TAB_34,
KON_TEXT_TAB_35,
KON_TEXT_TAB_36,
KON_TEXT_TAB_37,
KON_TEXT_TAB_38,
KON_TEXT_TAB_39,
KON_TEXT_TAB_40,
KON_TEXT_TAB_41,
KON_TEXT_TAB_42,
KON_TEXT_TAB_43,
KON_TEXT_TAB_44,
KON_TEXT_TAB_45,
KON_TEXT_TAB_46,
KON_TEXT_TAB_47,
KON_TEXT_TAB_48,
KON_TEXT_TAB_49,
KON_TEXT_TAB_50,
LETZT_AEND,
USERX,
STAT_KZ,
RESERVE_X30,
ORDAT_SEQUENCE
FROM DBVGMS_KNN_M;
----------------------------------------------------------
DROP TABLE DBXNET.DBVGMS_KNN_M;
-----------------------------------------------------------------------
CREATE TABLE DBXNET.DBVGMS_KNN_M AS SELECT * FROM DBVGMS.KNN_M;
--------------------------------------------------
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBXNET"."DBVGMS_KNN_MV" ("KON_SL_GES", "KON_TEXT_TAB_1", "KON_TEXT_TAB_2", "KON_TEXT_TAB_3", "KON_TEXT_TAB_4", "KON_TEXT_TAB_5", "KON_TEXT_TAB_6", "KON_TEXT_TAB_7", "KON_TEXT_TAB_8", "KON_TEXT_TAB_9", "KON_TEXT_TAB_10", "KON_TEXT_TAB_11", "KON_TEXT_TAB_12", "KON_TEXT_TAB_13", "KON_TEXT_TAB_14", "KON_TEXT_TAB_15", "KON_TEXT_TAB_16", "KON_TEXT_TAB_17", "KON_TEXT_TAB_18", "KON_TEXT_TAB_19", "KON_TEXT_TAB_20", "KON_TEXT_TAB_21", "KON_TEXT_TAB_22", "KON_TEXT_TAB_23", "KON_TEXT_TAB_24", "KON_TEXT_TAB_25", "KON_TEXT_TAB_26", "KON_TEXT_TAB_27", "KON_TEXT_TAB_28", "KON_TEXT_TAB_29", "KON_TEXT_TAB_30", "KON_TEXT_TAB_31", "KON_TEXT_TAB_32", "KON_TEXT_TAB_33", "KON_TEXT_TAB_34", "KON_TEXT_TAB_35", "KON_TEXT_TAB_36", "KON_TEXT_TAB_37", "KON_TEXT_TAB_38", "KON_TEXT_TAB_39", "KON_TEXT_TAB_40", "KON_TEXT_TAB_41", "KON_TEXT_TAB_42", "KON_TEXT_TAB_43", "KON_TEXT_TAB_44", "KON_TEXT_TAB_45", "KON_TEXT_TAB_46", "KON_TEXT_TAB_47", "KON_TEXT_TAB_48", "KON_TEXT_TAB_49", "KON_TEXT_TAB_50", "LETZT_AEND", "USERX", "STAT_KZ", "RESERVE_X30", "ORDAT_SEQUENCE") AS 
  SELECT
KON_SL_GES,
KON_TEXT_TAB_1,
KON_TEXT_TAB_2,
KON_TEXT_TAB_3,
KON_TEXT_TAB_4,
KON_TEXT_TAB_5,
KON_TEXT_TAB_6,
KON_TEXT_TAB_7,
KON_TEXT_TAB_8,
KON_TEXT_TAB_9,
KON_TEXT_TAB_10,
KON_TEXT_TAB_11,
KON_TEXT_TAB_12,
KON_TEXT_TAB_13,
KON_TEXT_TAB_14,
KON_TEXT_TAB_15,
KON_TEXT_TAB_16,
KON_TEXT_TAB_17,
KON_TEXT_TAB_18,
KON_TEXT_TAB_19,
KON_TEXT_TAB_20,
KON_TEXT_TAB_21,
KON_TEXT_TAB_22,
KON_TEXT_TAB_23,
KON_TEXT_TAB_24,
KON_TEXT_TAB_25,
KON_TEXT_TAB_26,
KON_TEXT_TAB_27,
KON_TEXT_TAB_28,
KON_TEXT_TAB_29,
KON_TEXT_TAB_30,
KON_TEXT_TAB_31,
KON_TEXT_TAB_32,
KON_TEXT_TAB_33,
KON_TEXT_TAB_34,
KON_TEXT_TAB_35,
KON_TEXT_TAB_36,
KON_TEXT_TAB_37,
KON_TEXT_TAB_38,
KON_TEXT_TAB_39,
KON_TEXT_TAB_40,
KON_TEXT_TAB_41,
KON_TEXT_TAB_42,
KON_TEXT_TAB_43,
KON_TEXT_TAB_44,
KON_TEXT_TAB_45,
KON_TEXT_TAB_46,
KON_TEXT_TAB_47,
KON_TEXT_TAB_48,
KON_TEXT_TAB_49,
KON_TEXT_TAB_50,
LETZT_AEND,
USERX,
STAT_KZ,
RESERVE_X30,
ORDAT_SEQUENCE
FROM DBVGMS_KNN_M;
----------------------------------------------------------
DROP TABLE DBXNET.DBVGST_KNN_M;
-----------------------------------------------------------------------
CREATE TABLE DBXNET.DBVGST_KNN_M AS SELECT * FROM DBVGST.KNN_M;
-----------------------------------------------
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBXNET"."DBVGST_KNN_MV" ("KON_SL_GES", "KON_TEXT_TAB_1", "KON_TEXT_TAB_2", "KON_TEXT_TAB_3", "KON_TEXT_TAB_4", "KON_TEXT_TAB_5", "KON_TEXT_TAB_6", "KON_TEXT_TAB_7", "KON_TEXT_TAB_8", "KON_TEXT_TAB_9", "KON_TEXT_TAB_10", "KON_TEXT_TAB_11", "KON_TEXT_TAB_12", "KON_TEXT_TAB_13", "KON_TEXT_TAB_14", "KON_TEXT_TAB_15", "KON_TEXT_TAB_16", "KON_TEXT_TAB_17", "KON_TEXT_TAB_18", "KON_TEXT_TAB_19", "KON_TEXT_TAB_20", "KON_TEXT_TAB_21", "KON_TEXT_TAB_22", "KON_TEXT_TAB_23", "KON_TEXT_TAB_24", "KON_TEXT_TAB_25", "KON_TEXT_TAB_26", "KON_TEXT_TAB_27", "KON_TEXT_TAB_28", "KON_TEXT_TAB_29", "KON_TEXT_TAB_30", "KON_TEXT_TAB_31", "KON_TEXT_TAB_32", "KON_TEXT_TAB_33", "KON_TEXT_TAB_34", "KON_TEXT_TAB_35", "KON_TEXT_TAB_36", "KON_TEXT_TAB_37", "KON_TEXT_TAB_38", "KON_TEXT_TAB_39", "KON_TEXT_TAB_40", "KON_TEXT_TAB_41", "KON_TEXT_TAB_42", "KON_TEXT_TAB_43", "KON_TEXT_TAB_44", "KON_TEXT_TAB_45", "KON_TEXT_TAB_46", "KON_TEXT_TAB_47", "KON_TEXT_TAB_48", "KON_TEXT_TAB_49", "KON_TEXT_TAB_50", "LETZT_AEND", "USERX", "STAT_KZ", "RESERVE_X30", "ORDAT_SEQUENCE") AS 
  SELECT
KON_SL_GES,
KON_TEXT_TAB_1,
KON_TEXT_TAB_2,
KON_TEXT_TAB_3,
KON_TEXT_TAB_4,
KON_TEXT_TAB_5,
KON_TEXT_TAB_6,
KON_TEXT_TAB_7,
KON_TEXT_TAB_8,
KON_TEXT_TAB_9,
KON_TEXT_TAB_10,
KON_TEXT_TAB_11,
KON_TEXT_TAB_12,
KON_TEXT_TAB_13,
KON_TEXT_TAB_14,
KON_TEXT_TAB_15,
KON_TEXT_TAB_16,
KON_TEXT_TAB_17,
KON_TEXT_TAB_18,
KON_TEXT_TAB_19,
KON_TEXT_TAB_20,
KON_TEXT_TAB_21,
KON_TEXT_TAB_22,
KON_TEXT_TAB_23,
KON_TEXT_TAB_24,
KON_TEXT_TAB_25,
KON_TEXT_TAB_26,
KON_TEXT_TAB_27,
KON_TEXT_TAB_28,
KON_TEXT_TAB_29,
KON_TEXT_TAB_30,
KON_TEXT_TAB_31,
KON_TEXT_TAB_32,
KON_TEXT_TAB_33,
KON_TEXT_TAB_34,
KON_TEXT_TAB_35,
KON_TEXT_TAB_36,
KON_TEXT_TAB_37,
KON_TEXT_TAB_38,
KON_TEXT_TAB_39,
KON_TEXT_TAB_40,
KON_TEXT_TAB_41,
KON_TEXT_TAB_42,
KON_TEXT_TAB_43,
KON_TEXT_TAB_44,
KON_TEXT_TAB_45,
KON_TEXT_TAB_46,
KON_TEXT_TAB_47,
KON_TEXT_TAB_48,
KON_TEXT_TAB_49,
KON_TEXT_TAB_50,
LETZT_AEND,
USERX,
STAT_KZ,
RESERVE_X30,
ORDAT_SEQUENCE
FROM DBVGST_KNN_M;
  ------------------------------------------------------------
  DROP TABLE DBXNET.DBVGWG_KNN_M;
-----------------------------------------------------------------------
CREATE TABLE DBXNET.DBVGWG_KNN_M AS SELECT * FROM DBVGWG.KNN_M;
-------------------------------------------------------------
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBXNET"."DBVGWG_KNN_MV" ("KON_SL_GES", "KON_TEXT_TAB_1", "KON_TEXT_TAB_2", "KON_TEXT_TAB_3", "KON_TEXT_TAB_4", "KON_TEXT_TAB_5", "KON_TEXT_TAB_6", "KON_TEXT_TAB_7", "KON_TEXT_TAB_8", "KON_TEXT_TAB_9", "KON_TEXT_TAB_10", "KON_TEXT_TAB_11", "KON_TEXT_TAB_12", "KON_TEXT_TAB_13", "KON_TEXT_TAB_14", "KON_TEXT_TAB_15", "KON_TEXT_TAB_16", "KON_TEXT_TAB_17", "KON_TEXT_TAB_18", "KON_TEXT_TAB_19", "KON_TEXT_TAB_20", "KON_TEXT_TAB_21", "KON_TEXT_TAB_22", "KON_TEXT_TAB_23", "KON_TEXT_TAB_24", "KON_TEXT_TAB_25", "KON_TEXT_TAB_26", "KON_TEXT_TAB_27", "KON_TEXT_TAB_28", "KON_TEXT_TAB_29", "KON_TEXT_TAB_30", "KON_TEXT_TAB_31", "KON_TEXT_TAB_32", "KON_TEXT_TAB_33", "KON_TEXT_TAB_34", "KON_TEXT_TAB_35", "KON_TEXT_TAB_36", "KON_TEXT_TAB_37", "KON_TEXT_TAB_38", "KON_TEXT_TAB_39", "KON_TEXT_TAB_40", "KON_TEXT_TAB_41", "KON_TEXT_TAB_42", "KON_TEXT_TAB_43", "KON_TEXT_TAB_44", "KON_TEXT_TAB_45", "KON_TEXT_TAB_46", "KON_TEXT_TAB_47", "KON_TEXT_TAB_48", "KON_TEXT_TAB_49", "KON_TEXT_TAB_50", "LETZT_AEND", "USERX", "STAT_KZ", "RESERVE_X30", "ORDAT_SEQUENCE") AS 
  SELECT
KON_SL_GES,
KON_TEXT_TAB_1,
KON_TEXT_TAB_2,
KON_TEXT_TAB_3,
KON_TEXT_TAB_4,
KON_TEXT_TAB_5,
KON_TEXT_TAB_6,
KON_TEXT_TAB_7,
KON_TEXT_TAB_8,
KON_TEXT_TAB_9,
KON_TEXT_TAB_10,
KON_TEXT_TAB_11,
KON_TEXT_TAB_12,
KON_TEXT_TAB_13,
KON_TEXT_TAB_14,
KON_TEXT_TAB_15,
KON_TEXT_TAB_16,
KON_TEXT_TAB_17,
KON_TEXT_TAB_18,
KON_TEXT_TAB_19,
KON_TEXT_TAB_20,
KON_TEXT_TAB_21,
KON_TEXT_TAB_22,
KON_TEXT_TAB_23,
KON_TEXT_TAB_24,
KON_TEXT_TAB_25,
KON_TEXT_TAB_26,
KON_TEXT_TAB_27,
KON_TEXT_TAB_28,
KON_TEXT_TAB_29,
KON_TEXT_TAB_30,
KON_TEXT_TAB_31,
KON_TEXT_TAB_32,
KON_TEXT_TAB_33,
KON_TEXT_TAB_34,
KON_TEXT_TAB_35,
KON_TEXT_TAB_36,
KON_TEXT_TAB_37,
KON_TEXT_TAB_38,
KON_TEXT_TAB_39,
KON_TEXT_TAB_40,
KON_TEXT_TAB_41,
KON_TEXT_TAB_42,
KON_TEXT_TAB_43,
KON_TEXT_TAB_44,
KON_TEXT_TAB_45,
KON_TEXT_TAB_46,
KON_TEXT_TAB_47,
KON_TEXT_TAB_48,
KON_TEXT_TAB_49,
KON_TEXT_TAB_50,
LETZT_AEND,
USERX,
STAT_KZ,
RESERVE_X30,
ORDAT_SEQUENCE
FROM DBVGWG_KNN_M;
------------------------------------------------------------------
DROP TABLE DBXNET.LANDES_M;

CREATE TABLE DBXNET.LANDES_M AS SELECT * FROM DBFBIN.LANDES_M;

SELECT * FROM dbxnet.landes_m;
 -----------------------------------------------------------------

------------------------------------------------------------------

CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."LANDES_MV" ("PLZ_LA", "TEXTE_1", "TEXTE_2", "TEXTE_3", "TEXTE_4", "TEXTE_5", "TEXTE_6", "TEXTE_7", "TEXTE_8", "TEXTE_9", "TEXTE_10", "AUSSENHANDEL_KZ", "LAENDERGRUPPE", "LETZT_AEND", "USERX", "STAT_KZ", "DECPC_KZ", "DATE_FORMAT", "AU_KBEZ", "AU_ZAHLKZ", "EU_KZ_2", "IDENTNRST_PREF", "IDENTNRST_LAENG", "LAND_KZ", "FW_CD", "KENN20", "SPR_LAND", "PRAEF_ZONE", "LIEK_LAENDER_GRP", "ORDAT_SEQUENCE") AS 
  SELECT
PLZ_LA,
TEXTE_1,
TEXTE_2,
TEXTE_3,
TEXTE_4,
TEXTE_5,
TEXTE_6,
TEXTE_7,
TEXTE_8,
TEXTE_9,
TEXTE_10,
AUSSENHANDEL_KZ,
LAENDERGRUPPE,
LETZT_AEND,
USERX,
STAT_KZ,
DECPC_KZ,
DATE_FORMAT,
AU_KBEZ,
AU_ZAHLKZ,
EU_KZ_2,
IDENTNRST_PREF,
IDENTNRST_LAENG,
LAND_KZ,
FW_CD,
KENN20,
SPR_LAND,
PRAEF_ZONE,
LIEK_LAENDER_GRP,
ORDAT_SEQUENCE
FROM LANDES_M;
-----------------------------------------------------------------
DROP TABLE DBXNET.SB1_M;

CREATE TABLE DBXNET.SBI_M AS SELECT * FROM DBSIII.SB1_M;

CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."SB1_MV" ("FANR_TEXTIDENT", "BELEG_TEXT_1", "BELEG_TEXT_2", "BELEG_TEXT_3", "BELEG_TEXT_4", "BELEG_TEXT_5", "BELEG_TEXT_6", "BELEG_TEXT_7", "BELEG_TEXT_8", "BELEG_TEXT_9", "BELEG_TEXT_10", "BELEG_TEXT_11", "BELEG_TEXT_12", "BELEG_TEXT_13", "BELEG_TEXT_14", "BELEG_TEXT_15", "BELEG_TEXT_16", "BELEG_TEXT_17", "BELEG_TEXT_18", "BELEG_TEXT_19", "BELEG_TEXT_20", "BELEG_TEXT_21", "BELEG_TEXT_22", "BELEG_TEXT_23", "BELEG_TEXT_24", "BELEG_TEXT_25", "BELEG_TEXT_26", "BELEG_TEXT_27", "BELEG_TEXT_28", "BELEG_TEXT_29", "BELEG_TEXT_30", "BELEG_TEXT_31", "BELEG_TEXT_32", "BELEG_TEXT_33", "BELEG_TEXT_34", "BELEG_TEXT_35", "BELEG_TEXT_36", "BELEG_TEXT_37", "BELEG_TEXT_38", "BELEG_TEXT_39", "BELEG_TEXT_40", "BELEG_TEXT_41", "BELEG_TEXT_42", "BELEG_TEXT_43", "BELEG_TEXT_44", "BELEG_TEXT_45", "BELEG_TEXT_46", "BELEG_TEXT_47", "BELEG_TEXT_48", "BELEG_TEXT_49", "BELEG_TEXT_50", "LETZT_AEND", "USERX", "ORDAT_SEQUENCE") AS 
  SELECT
FANR_TEXTIDENT,
BELEG_TEXT_1,
BELEG_TEXT_2,
BELEG_TEXT_3,
BELEG_TEXT_4,
BELEG_TEXT_5,
BELEG_TEXT_6,
BELEG_TEXT_7,
BELEG_TEXT_8,
BELEG_TEXT_9,
BELEG_TEXT_10,
BELEG_TEXT_11,
BELEG_TEXT_12,
BELEG_TEXT_13,
BELEG_TEXT_14,
BELEG_TEXT_15,
BELEG_TEXT_16,
BELEG_TEXT_17,
BELEG_TEXT_18,
BELEG_TEXT_19,
BELEG_TEXT_20,
BELEG_TEXT_21,
BELEG_TEXT_22,
BELEG_TEXT_23,
BELEG_TEXT_24,
BELEG_TEXT_25,
BELEG_TEXT_26,
BELEG_TEXT_27,
BELEG_TEXT_28,
BELEG_TEXT_29,
BELEG_TEXT_30,
BELEG_TEXT_31,
BELEG_TEXT_32,
BELEG_TEXT_33,
BELEG_TEXT_34,
BELEG_TEXT_35,
BELEG_TEXT_36,
BELEG_TEXT_37,
BELEG_TEXT_38,
BELEG_TEXT_39,
BELEG_TEXT_40,
BELEG_TEXT_41,
BELEG_TEXT_42,
BELEG_TEXT_43,
BELEG_TEXT_44,
BELEG_TEXT_45,
BELEG_TEXT_46,
BELEG_TEXT_47,
BELEG_TEXT_48,
BELEG_TEXT_49,
BELEG_TEXT_50,
LETZT_AEND,
USERX,
ORDAT_SEQUENCE
FROM SB1_M;
---------------------------------------------------------------
DROP TABLE DBXNET.SK3_D;

CREATE TABLE DBXNET.SK3_D AS SELECT * FROM DBSIII.SK3_D;

------------------------------------------------------------------
---------------------------------------------------------------
DROP TABLE DBXNET.SAVK_D;

CREATE TABLE DBXNET.SAVK_D AS SELECT * FROM DBAUFT.SAVK_D;

------------------------------------------------------------------
DROP TABLE DBXNET.FIRMP_D;
-----------------------------------------------------------------------
CREATE TABLE DBXNET.FIRMP_D AS SELECT * FROM DBSIGB.FIRMP_D;

CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."FIRMP_DV" ("FIRMNR", "MONENDDATUM", "GJBEGDATUM", "GJBEGBBW", "RELODATUM", "RELODATUM_ALT", "RELO_STATUS", "BBW_STATUS", "RELO_KZ", "RELO_DRUCKER", "FIBU_DRUCKER", "SPR_SL", "BASW_FW_FIX", "BASW_FW_BBW", "FW_CD_TRF", "FIRMPARAM", "HAREG_NR", "LFD_ZT_FW", "DBUSTA_FA_NR", "Z_FA_NR", "Z_DGRP_FT", "Z_DGRP_ET", "BASW_FW_FRACHT", "FW_CD_UMPO", "FA_NAME_HYP", "FA_KURZBEZ_HYP", "FILENAME_HYP", "FA_NAME_IST_HYP", "FDM_FOLDER", "FTP_VIRT_FOLDER", "KSTL_KZ", "SORT_RELO", "SORT_TUPD", "VEEH", "STEU_IND", "PLZ_LA", "ORDAT_SEQUENCE") AS 
  SELECT
FIRMNR,
MONENDDATUM,
GJBEGDATUM,
GJBEGBBW,
RELODATUM,
RELODATUM_ALT,
RELO_STATUS,
BBW_STATUS,
RELO_KZ,
RELO_DRUCKER,
FIBU_DRUCKER,
SPR_SL,
BASW_FW_FIX,
BASW_FW_BBW,
FW_CD_TRF,
FIRMPARAM,
HAREG_NR,
LFD_ZT_FW,
DBUSTA_FA_NR,
Z_FA_NR,
Z_DGRP_FT,
Z_DGRP_ET,
BASW_FW_FRACHT,
FW_CD_UMPO,
FA_NAME_HYP,
FA_KURZBEZ_HYP,
FILENAME_HYP,
FA_NAME_IST_HYP,
FDM_FOLDER,
FTP_VIRT_FOLDER,
KSTL_KZ,
SORT_RELO,
SORT_TUPD,
VEEH,
STEU_IND,
PLZ_LA,
ORDAT_SEQUENCE
FROM FIRMP_D;
--------------------------------------------------------------------
-----------------------------------------------------------------
---DBAUFT.KDGR_M
----------------------------------------------------------
DROP TABLE DBXNET.KDGR_M;
-----------------------------------------------------------------------
CREATE TABLE DBXNET.KDGR_M AS SELECT * FROM DBAUFT.KDGR_M;

------------------------------------------------------------------
DROP TABLE DBXNET.KDGU_D;

CREATE TABLE DBXNET.KDGU_D AS SELECT * FROM DBAUFT.KDGU_D;

-----check with Atul------
CREATE OR REPLACE EDITIONABLE TRIGGER "DBXNET"."KDGU_D_01_GUTB_MTD" 
after insert or
update of ve,
vw,
bra_sl_1,
bra_sl_2,
bra_sl_3,
bra_sl_4,
bra_sl_5,
vert_nr,
vert_tab2_1,
vert_tab2_2,
kennzleiste,
kdsl,
kon_sl10_1,
kon_sl10_2,
kon_sl10_3,
kon_sl10_4,
kon_sl10_5,
kon_sl10_6,
kon_sl10_7,
kon_sl10_8,
kon_sl10_9,
kon_sl10_10
on DBXNET.kdgu_d
for each row
begin
if substr (:new.gubkto, 2, 1) = ' '
then
update dbstmt.kdu_m
set fa_upd_kz = substr (fa_gubkto, 1, 6)
where gubkto like
(   substr (:new.gubkto, 1, 1)
|| '_'
|| substr (:new.gubkto, 3, 8));
else
update dbstmt.kdu_m
set fa_upd_kz = substr (fa_gubkto, 1, 6)
where gubkto = :new.gubkto;
end if;
end kdgu_d_01_gutb_mtd;

ALTER TRIGGER "DBXNET"."KDGU_D_01_GUTB_MTD" ENABLE;


----------------------------------------------------------------

CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."KDGU_DV" ("KTO_NR", "GUBKTO", "KENNZLEISTE", "UMSKZ_JAHR3", "VERT_NR", "BELDRCKKZ", "LETZ_BES", "ZAHL_KOND_NR", "KON_SL10_1", "KON_SL10_2", "KON_SL10_3", "KON_SL10_4", "KON_SL10_5", "KON_SL10_6", "KON_SL10_7", "KON_SL10_8", "KON_SL10_9", "KON_SL10_10", "VERKN_KZ", "VE", "STAF_STUFE", "LORT", "ZUDGRP_LGORT", "VW", "KOFU_TEXT", "VERS_ADRESS_SL", "PREISLISTE", "RABATTGR", "KDSL", "LETZT_AEND", "USERX", "STAT_KZ", "FORMULAR_KZ", "VERT_TAB2_1", "VERT_TAB2_2", "VERS_KTO_NR", "PERSNR", "LSFREIGKZ", "DRUCK_KZ_TAB", "DAT_FAKT", "PERIODE", "ST_TOUR", "DGRPLO_ALTERN_1", "DGRPLO_ALTERN_2", "DGRPLO_ALTERN_3", "DGRP_ALTERN_KM_1", "DGRP_ALTERN_KM_2", "DGRP_ALTERN_KM_3", "DGRP_ALTERN_TAGE_1", "DGRP_ALTERN_TAGE_2", "DGRP_ALTERN_TAGE_3", "VORGANGS_ART", "VERSAND_ART", "PERIODE1", "KENNZL_X4", "WERTGRENZE", "WERTGRENZE_KZ", "MET_ZU_SATZ", "PROV_SPLIT_TAB3_1", "PROV_SPLIT_TAB3_2", "PROV_SPLIT_TAB3_3", "INFO_DAT", "UEB_PROZ", "UNT_PROZ", "KENNZLEISTE3", "HK_PREISLISTE", "KOMM_KZ", "BRA_SL_1", "BRA_SL_2", "BRA_SL_3", "BRA_SL_4", "BRA_SL_5", "ERLKTO_IND", "MWST_INDEX", "STAND_NR", "STAND_ART", "V_STAND_NR", "V_STAND_ART", "ABHOL_TAG_TAB", "FZ_CHECK", "LPLATZ", "RESERVE", "LETZT_DAT_LOAD", "LETZT_DAT_FABU", "RG_KTO_NR", "RG_SL", "IDENTNRST", "WMJW_DATUM", "DAT_GUELTIG_VON", "PREISBASISDATUM", "ORDAT_SEQUENCE") AS 
  SELECT
KTO_NR,
GUBKTO,
KENNZLEISTE,
UMSKZ_JAHR3,
VERT_NR,
BELDRCKKZ,
LETZ_BES,
ZAHL_KOND_NR,
KON_SL10_1,
KON_SL10_2,
KON_SL10_3,
KON_SL10_4,
KON_SL10_5,
KON_SL10_6,
KON_SL10_7,
KON_SL10_8,
KON_SL10_9,
KON_SL10_10,
VERKN_KZ,
VE,
STAF_STUFE,
LORT,
ZUDGRP_LGORT,
VW,
KOFU_TEXT,
VERS_ADRESS_SL,
PREISLISTE,
RABATTGR,
KDSL,
LETZT_AEND,
USERX,
STAT_KZ,
FORMULAR_KZ,
VERT_TAB2_1,
VERT_TAB2_2,
VERS_KTO_NR,
PERSNR,
LSFREIGKZ,
DRUCK_KZ_TAB,
DAT_FAKT,
PERIODE,
ST_TOUR,
DGRPLO_ALTERN_1,
DGRPLO_ALTERN_2,
DGRPLO_ALTERN_3,
DGRP_ALTERN_KM_1,
DGRP_ALTERN_KM_2,
DGRP_ALTERN_KM_3,
DGRP_ALTERN_TAGE_1/10,
DGRP_ALTERN_TAGE_2/10,
DGRP_ALTERN_TAGE_3/10,
VORGANGS_ART,
VERSAND_ART,
PERIODE1,
KENNZL_X4,
WERTGRENZE/100,
WERTGRENZE_KZ,
MET_ZU_SATZ/100,
PROV_SPLIT_TAB3_1/10,
PROV_SPLIT_TAB3_2/10,
PROV_SPLIT_TAB3_3/10,
INFO_DAT,
UEB_PROZ/10,
UNT_PROZ/10,
KENNZLEISTE3,
HK_PREISLISTE,
KOMM_KZ,
BRA_SL_1,
BRA_SL_2,
BRA_SL_3,
BRA_SL_4,
BRA_SL_5,
ERLKTO_IND,
MWST_INDEX,
STAND_NR,
STAND_ART,
V_STAND_NR,
V_STAND_ART,
ABHOL_TAG_TAB,
FZ_CHECK,
LPLATZ,
RESERVE,
LETZT_DAT_LOAD,
LETZT_DAT_FABU,
RG_KTO_NR,
RG_SL,
IDENTNRST,
WMJW_DATUM,
DAT_GUELTIG_VON,
PREISBASISDATUM,
ORDAT_SEQUENCE
FROM KDGU_D;
-----------------------------------------------------------------
------CATEGORY 1 ENDS--------------------------------------------
------CATEGORY 2 FOSS TABLES THAT WERE MOVED TO DBXNET WITH -------ALTERATION
--------------------------CHECK ONCE-----------------------------
CREATE TABLE "DBXNET"."KD01_D" 
   (	"KTO_NR" NUMBER(10,0), 
	"FA_KTO_NR" CHAR(14), 
	"FW_CD" VARCHAR2(6), 
	"MWST_SATZ_1" NUMBER(10,0), 
	"MWST_SATZ_2" NUMBER(10,0), 
	"KENNZLEISTE" VARCHAR2(24), 
	"UMSKZ_JAHR3" VARCHAR2(4), 
	"STAF_STUFE" NUMBER(5,0), 
	"KRED_LIM" NUMBER(15,0), 
	"KRED_STAND" NUMBER(15,0), 
	"BRA_SL_1" VARCHAR2(4), 
	"BRA_SL_2" VARCHAR2(4), 
	"BRA_SL_3" VARCHAR2(4), 
	"BRA_SL_4" VARCHAR2(4), 
	"BRA_SL_5" VARCHAR2(4), 
	"SPR_SL" NUMBER(5,0), 
	"STCK_GLZ_1" NUMBER(10,0), 
	"STCK_GLZ_2" NUMBER(10,0), 
	"STCK_BHF_1" VARCHAR2(30), 
	"STCK_BHF_2" VARCHAR2(30), 
	"TEL_TAB6_1" VARCHAR2(16), 
	"TEL_TAB6_2" VARCHAR2(16), 
	"TEL_TAB6_3" VARCHAR2(31), 
	"TEL_TAB6_4" VARCHAR2(30), 
	"TEL_TAB6_5" VARCHAR2(16), 
	"TEL_TAB6_6" VARCHAR2(16), 
	"REF_KZ" VARCHAR2(10), 
	"BELDRCKKZ" VARCHAR2(10), 
	"LETZ_BES" NUMBER(10,0), 
	"ZAHL_KOND_NR" VARCHAR2(6), 
	"KON_SL10_1" NUMBER(5,0), 
	"KON_SL10_2" NUMBER(5,0), 
	"KON_SL10_3" NUMBER(5,0), 
	"KON_SL10_4" NUMBER(5,0), 
	"KON_SL10_5" NUMBER(5,0), 
	"KON_SL10_6" NUMBER(5,0), 
	"KON_SL10_7" NUMBER(5,0), 
	"KON_SL10_8" NUMBER(5,0), 
	"KON_SL10_9" NUMBER(5,0), 
	"KON_SL10_10" NUMBER(5,0), 
	"VERKN_KZ" VARCHAR2(10), 
	"VE" VARCHAR2(16), 
	"VW" VARCHAR2(2), 
	"LORT" VARCHAR2(4), 
	"ZUDGRP_LGORT" VARCHAR2(4), 
	"STATZEILE" NUMBER(5,0), 
	"KOFU_TEXT" VARCHAR2(8), 
	"RG_KTO_NR" NUMBER(10,0), 
	"VERS_ADRESS_SL" NUMBER(5,0), 
	"KDGR" CHAR(4), 
	"PREISLISTE" VARCHAR2(10), 
	"RABATTGR" VARCHAR2(10), 
	"KEY14" CHAR(14), 
	"KEY10" CHAR(10), 
	"KEY6" CHAR(6), 
	"DGRPLO_ALTERN_1" VARCHAR2(2), 
	"DGRPLO_ALTERN_2" VARCHAR2(2), 
	"DGRPLO_ALTERN_3" VARCHAR2(2), 
	"DGRP_ALTERN_KM_1" NUMBER(5,0), 
	"DGRP_ALTERN_KM_2" NUMBER(5,0), 
	"DGRP_ALTERN_KM_3" NUMBER(5,0), 
	"DGRP_ALTERN_TAGE_1" NUMBER(5,0), 
	"DGRP_ALTERN_TAGE_2" NUMBER(5,0), 
	"DGRP_ALTERN_TAGE_3" NUMBER(5,0), 
	"SERVICE_KTONR" NUMBER(10,0), 
	"ZUORDKTO_TAB_1" VARCHAR2(20), 
	"ZUORDKTO_TAB_2" VARCHAR2(20), 
	"ZUORDKTO_TAB_3" VARCHAR2(20), 
	"DFUE_WERK" CHAR(12), 
	"KDSL" VARCHAR2(60), 
	"LETZT_AEND" NUMBER(10,0), 
	"USERX" VARCHAR2(8), 
	"STAT_KZ" VARCHAR2(2), 
	"FORMULAR_KZ" VARCHAR2(10), 
	"VERT_TAB2_1" VARCHAR2(200), 
	"VERT_TAB2_2" VARCHAR2(200), 
	"VERS_KTO_NR" NUMBER(10,0), 
	"PERSNR" NUMBER(10,0), 
	"LSFREIGKZ" VARCHAR2(2), 
	"DRUCK_KZ_TAB" VARCHAR2(2), 
	"DAT_FAKT" NUMBER(10,0), 
	"PERIODE" VARCHAR2(2), 
	"ST_TOUR" VARCHAR2(4), 
	"STAND_NR" VARCHAR2(8), 
	"STAND_ART" VARCHAR2(2), 
	"V_STAND_NR" VARCHAR2(8), 
	"V_STAND_ART" VARCHAR2(2), 
	"PERSONALNR" NUMBER(10,0), 
	"VORGANGS_ART" VARCHAR2(4), 
	"VERSAND_ART" VARCHAR2(4), 
	"MGRP_SA" VARCHAR2(10), 
	"LI_TER_EXT_KZ" VARCHAR2(2), 
	"STAND_NR1" VARCHAR2(8), 
	"V_STAND_NR1" VARCHAR2(8), 
	"V_STAND_ART1" VARCHAR2(2), 
	"BST" VARCHAR2(2), 
	"ZVA" VARCHAR2(2), 
	"KOSTENSTELLE" VARCHAR2(10), 
	"PERIODE1" VARCHAR2(2), 
	"MIETFREIE_TAGE" NUMBER(5,0), 
	"MINDEST_BETR" NUMBER(15,0), 
	"AUSBUCH_BETR" NUMBER(15,0), 
	"ZAHL_KOND_MET" VARCHAR2(6), 
	"AUSLIEFER_GRP" VARCHAR2(2), 
	"WERKSNR" VARCHAR2(4), 
	"KENNZLEISTE_X2" VARCHAR2(2), 
	"SDB_KZ" VARCHAR2(2), 
	"BONUS_KDGR_1" VARCHAR2(4), 
	"BONUS_KDGR_2" VARCHAR2(4), 
	"BONUS_KDGR_3" VARCHAR2(4), 
	"RG_SL" NUMBER(5,0), 
	"KENNZL_X4" VARCHAR2(4), 
	"WERTGRENZE" NUMBER(15,0), 
	"WERTGRENZE_KZ" VARCHAR2(2), 
	"MET_ZU_SATZ" NUMBER(5,0), 
	"PROV_SPLIT_TAB3_1" NUMBER(5,0), 
	"PROV_SPLIT_TAB3_2" NUMBER(5,0), 
	"PROV_SPLIT_TAB3_3" NUMBER(5,0), 
	"INFO_DAT" NUMBER(10,0), 
	"UEB_PROZ" NUMBER(5,0), 
	"UNT_PROZ" NUMBER(5,0), 
	"KENNZLEISTE3" VARCHAR2(2), 
	"HK_PREISLISTE" VARCHAR2(10), 
	"KOMM_KZ" VARCHAR2(2), 
	"KENNZLEISTE4" VARCHAR2(2), 
	"QS_STATUS_VON" NUMBER(5,0), 
	"QS_STATUS_BIS" NUMBER(5,0), 
	"BEHAELTER" VARCHAR2(8), 
	"KENNZLEISTE5" VARCHAR2(2), 
	"BEGIN_GJ" VARCHAR2(2), 
	"KENNZLEISTE6" VARCHAR2(2), 
	"ERLKTO_IND" NUMBER(5,0), 
	"MIET_STAND" NUMBER(15,0), 
	"MIET_NV_TAGE" NUMBER(10,0), 
	"MIET_FAKT_TAGE" NUMBER(10,0), 
	"MIET_NV_NR" VARCHAR2(12), 
	"KENNZLEISTE7" VARCHAR2(2), 
	"GB_UB" VARCHAR2(2), 
	"VERSICH_LIM" NUMBER(15,0), 
	"LPLATZ" VARCHAR2(12), 
	"RESERVE" VARCHAR2(60), 
	"KENNZLEISTE_X10" VARCHAR2(10), 
	"ABHOL_TAG_TAB" VARCHAR2(8), 
	"FZ_CHECK" VARCHAR2(2), 
	"KD_SICHGRP" VARCHAR2(4), 
	"LETZT_DAT_LOAD" NUMBER(10,0), 
	"LETZT_DAT_FABU" NUMBER(10,0), 
	"BEISTELL_LORT" VARCHAR2(4), 
	"LPLATZ_BEH_ZU" VARCHAR2(12), 
	"PREIS_FIND_DAT" NUMBER(10,0), 
	"EDL_SR_KZ" VARCHAR2(2), 
	"RESERVE2" VARCHAR2(60), 
	"LOAD_FROZEN_ZONE" NUMBER(5,0), 
	"RESERVEFELD30_1" VARCHAR2(30), 
	"RESERVEFELD30_2" VARCHAR2(30), 
	"RESERVEFELD30_3" VARCHAR2(30), 
	"RESERVEFELD30_4" VARCHAR2(30), 
	"RESERVEFELD30_5" VARCHAR2(30), 
	"RESERVEFELD30_6" VARCHAR2(30), 
	"RESERVEFELD30_7" VARCHAR2(30), 
	"RESERVEFELD30_8" VARCHAR2(30), 
	"RESERVEFELD30_9" VARCHAR2(30), 
	"RESERVEFELD30_10" VARCHAR2(30), 
	"RESERVEFELDDIG_1" NUMBER(10,0), 
	"RESERVEFELDDIG_2" NUMBER(10,0), 
	"RESERVEFELDDIG_3" NUMBER(10,0), 
	"RESERVEFELDDIG_4" NUMBER(10,0), 
	"RESERVEFELDDIG_5" NUMBER(10,0), 
	"RESERVEFELDDAT_1" NUMBER(10,0), 
	"RESERVEFELDDAT_2" NUMBER(10,0), 
	"RESERVEFELDDAT_3" NUMBER(10,0), 
	"RESERVEFELDDAT_4" NUMBER(10,0), 
	"RESERVEFELDDAT_5" NUMBER(10,0), 
	"RESERVEFELD_X2_1" VARCHAR2(2), 
	"RESERVEFELD_X2_2" VARCHAR2(2), 
	"RESERVEFELD_X2_3" VARCHAR2(2), 
	"RESERVEFELD_X2_4" VARCHAR2(2), 
	"RESERVEFELD_X2_5" VARCHAR2(2), 
	"PREISEINH" VARCHAR2(2), 
	"UNTERWEGS_KZ" VARCHAR2(4), 
	"AUFTR_KTO_NR" NUMBER(10,0), 
	"PERSNR2" NUMBER(10,0), 
	"PERSNR3" NUMBER(10,0), 
	"ORDAT_SEQUENCE" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TERMIN_FIX_KZ" VARCHAR2(2), 
	"PRUEFGRUPPE" VARCHAR2(20), 
	"VERTRIEBS_STATUS" VARCHAR2(4), 
	"VERTRIEBS_GEBIET" VARCHAR2(4), 
	"RES_X4_1" VARCHAR2(4), 
	"RES_X4_2" VARCHAR2(4), 
	"RES_X4_3" VARCHAR2(4), 
	"RES_X4_4" VARCHAR2(4), 
	"JAHRESUMSATZ" NUMBER(11,0), 
	"JU_FW_CD" VARCHAR2(6), 
	"WMJW_DATUM" NUMBER(10,0), 
	"DAT_GUELTIG_VON" NUMBER(10,0), 
	"FRIST_LTKZ_E" NUMBER(5,0), 
	"FRIST_LTKZ_E_SL" NUMBER(5,0), 
	"FRIST_LTKZ_B" NUMBER(5,0), 
	"FRIST_LTKZ_B_SL" NUMBER(5,0), 
	"FRIST_LTKZ_M" NUMBER(5,0), 
	"FRIST_LTKZ_M_SL" NUMBER(5,0), 
	"FRACHTFREI_GRENZ" NUMBER(15,0), 
	"PREISBASISDATUM" NUMBER(10,0), 
	"KD_ABC_KL" VARCHAR2(2), 
	"EXT_PKST_IDENT" VARCHAR2(6), 
	"SAP_CUST_NUMBER" VARCHAR2(200), 
	"CREDIT_STATUS" VARCHAR2(200), 
	"CUST_HIERARCHY" VARCHAR2(200), 
	"CUST_EMAIL_ID" VARCHAR2(256), 
	"VERT_NR" VARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
	
------------------------------------------------------------------

-------------------------------------------------------------------
 
 ---------------------------------------------------------------

CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."KD01_DV" ("KTO_NR", "FA_KTO_NR", "FW_CD", "MWST_SATZ_1", "MWST_SATZ_2", "KENNZLEISTE", "UMSKZ_JAHR3", "STAF_STUFE", "KRED_LIM", "KRED_STAND", "BRA_SL_1", "BRA_SL_2", "BRA_SL_3", "BRA_SL_4", "BRA_SL_5", "SPR_SL", "STCK_GLZ_1", "STCK_GLZ_2", "STCK_BHF_1", "STCK_BHF_2", "TEL_TAB6_1", "TEL_TAB6_2", "TEL_TAB6_3", "TEL_TAB6_4", "TEL_TAB6_5", "TEL_TAB6_6", "REF_KZ", "VERT_NR", "BELDRCKKZ", "LETZ_BES", "ZAHL_KOND_NR", "KON_SL10_1", "KON_SL10_2", "KON_SL10_3", "KON_SL10_4", "KON_SL10_5", "KON_SL10_6", "KON_SL10_7", "KON_SL10_8", "KON_SL10_9", "KON_SL10_10", "VERKN_KZ", "VE", "VW", "LORT", "ZUDGRP_LGORT", "STATZEILE", "KOFU_TEXT", "RG_KTO_NR", "VERS_ADRESS_SL", "KDGR", "PREISLISTE", "RABATTGR", "KEY14", "KEY10", "KEY6", "DGRPLO_ALTERN_1", "DGRPLO_ALTERN_2", "DGRPLO_ALTERN_3", "DGRP_ALTERN_KM_1", "DGRP_ALTERN_KM_2", "DGRP_ALTERN_KM_3", "DGRP_ALTERN_TAGE_1", "DGRP_ALTERN_TAGE_2", "DGRP_ALTERN_TAGE_3", "SERVICE_KTONR", "ZUORDKTO_TAB_1", "ZUORDKTO_TAB_2", "ZUORDKTO_TAB_3", "DFUE_WERK", "KDSL", "LETZT_AEND", "USERX", "STAT_KZ", "FORMULAR_KZ", "VERT_TAB2_1", "VERT_TAB2_2", "VERS_KTO_NR", "PERSNR", "LSFREIGKZ", "DRUCK_KZ_TAB", "DAT_FAKT", "PERIODE", "ST_TOUR", "STAND_NR", "STAND_ART", "V_STAND_NR", "V_STAND_ART", "PERSONALNR", "VORGANGS_ART", "VERSAND_ART", "MGRP_SA", "LI_TER_EXT_KZ", "STAND_NR1", "V_STAND_NR1", "V_STAND_ART1", "BST", "ZVA", "KOSTENSTELLE", "PERIODE1", "MIETFREIE_TAGE", "MINDEST_BETR", "AUSBUCH_BETR", "ZAHL_KOND_MET", "AUSLIEFER_GRP", "WERKSNR", "KENNZLEISTE_X2", "SDB_KZ", "BONUS_KDGR_1", "BONUS_KDGR_2", "BONUS_KDGR_3", "RG_SL", "KENNZL_X4", "WERTGRENZE", "WERTGRENZE_KZ", "MET_ZU_SATZ", "PROV_SPLIT_TAB3_1", "PROV_SPLIT_TAB3_2", "PROV_SPLIT_TAB3_3", "INFO_DAT", "UEB_PROZ", "UNT_PROZ", "KENNZLEISTE3", "HK_PREISLISTE", "KOMM_KZ", "KENNZLEISTE4", "QS_STATUS_VON", "QS_STATUS_BIS", "BEHAELTER", "KENNZLEISTE5", "BEGIN_GJ", "KENNZLEISTE6", "ERLKTO_IND", "MIET_STAND", "MIET_NV_TAGE", "MIET_FAKT_TAGE", "MIET_NV_NR", "KENNZLEISTE7", "GB_UB", "VERSICH_LIM", "LPLATZ", "RESERVE", "KENNZLEISTE_X10", "ABHOL_TAG_TAB", "FZ_CHECK", "KD_SICHGRP", "LETZT_DAT_LOAD", "LETZT_DAT_FABU", "BEISTELL_LORT", "LPLATZ_BEH_ZU", "PREIS_FIND_DAT", "EDL_SR_KZ", "RESERVE2", "LOAD_FROZEN_ZONE", "RESERVEFELD30_1", "RESERVEFELD30_2", "RESERVEFELD30_3", "RESERVEFELD30_4", "RESERVEFELD30_5", "RESERVEFELD30_6", "RESERVEFELD30_7", "RESERVEFELD30_8", "RESERVEFELD30_9", "RESERVEFELD30_10", "RESERVEFELDDIG_1", "RESERVEFELDDIG_2", "RESERVEFELDDIG_3", "RESERVEFELDDIG_4", "RESERVEFELDDIG_5", "RESERVEFELDDAT_1", "RESERVEFELDDAT_2", "RESERVEFELDDAT_3", "RESERVEFELDDAT_4", "RESERVEFELDDAT_5", "RESERVEFELD_X2_1", "RESERVEFELD_X2_2", "RESERVEFELD_X2_3", "RESERVEFELD_X2_4", "RESERVEFELD_X2_5", "PREISEINH", "UNTERWEGS_KZ", "AUFTR_KTO_NR", "PERSNR2", "PERSNR3", "TERMIN_FIX_KZ", "PRUEFGRUPPE", "VERTRIEBS_STATUS", "VERTRIEBS_GEBIET", "RES_X4_1", "RES_X4_2", "RES_X4_3", "RES_X4_4", "JAHRESUMSATZ", "JU_FW_CD", "WMJW_DATUM", "DAT_GUELTIG_VON", "FRIST_LTKZ_E", "FRIST_LTKZ_E_SL", "FRIST_LTKZ_B", "FRIST_LTKZ_B_SL", "FRIST_LTKZ_M", "FRIST_LTKZ_M_SL", "FRACHTFREI_GRENZ", "PREISBASISDATUM", "KD_ABC_KL", "EXT_PKST_IDENT", "SAP_CUST_NUMBER", "CREDIT_STATUS", "CUST_HIERARCHY", "CUST_EMAIL_ID") AS 
  SELECT
KTO_NR,
FA_KTO_NR,
FW_CD,
MWST_SATZ_1/1000,
MWST_SATZ_2/1000,
KENNZLEISTE,
UMSKZ_JAHR3,
STAF_STUFE,
KRED_LIM/100,
KRED_STAND/100,
BRA_SL_1,
BRA_SL_2,
BRA_SL_3,
BRA_SL_4,
BRA_SL_5,
SPR_SL,
STCK_GLZ_1,
STCK_GLZ_2,
STCK_BHF_1,
STCK_BHF_2,
TEL_TAB6_1,
TEL_TAB6_2,
TEL_TAB6_3,
TEL_TAB6_4,
TEL_TAB6_5,
TEL_TAB6_6,
REF_KZ,
VERT_NR,
BELDRCKKZ,
LETZ_BES,
ZAHL_KOND_NR,
KON_SL10_1,
KON_SL10_2,
KON_SL10_3,
KON_SL10_4,
KON_SL10_5,
KON_SL10_6,
KON_SL10_7,
KON_SL10_8,
KON_SL10_9,
KON_SL10_10,
VERKN_KZ,
VE,
VW,
LORT,
ZUDGRP_LGORT,
STATZEILE,
KOFU_TEXT,
RG_KTO_NR,
VERS_ADRESS_SL,
KDGR,
PREISLISTE,
RABATTGR,
KEY14,
KEY10,
KEY6,
DGRPLO_ALTERN_1,
DGRPLO_ALTERN_2,
DGRPLO_ALTERN_3,
DGRP_ALTERN_KM_1,
DGRP_ALTERN_KM_2,
DGRP_ALTERN_KM_3,
DGRP_ALTERN_TAGE_1/10,
DGRP_ALTERN_TAGE_2/10,
DGRP_ALTERN_TAGE_3/10,
SERVICE_KTONR,
ZUORDKTO_TAB_1,
ZUORDKTO_TAB_2,
ZUORDKTO_TAB_3,
DFUE_WERK,
KDSL,
LETZT_AEND,
USERX,
STAT_KZ,
FORMULAR_KZ,
VERT_TAB2_1,
VERT_TAB2_2,
VERS_KTO_NR,
PERSNR,
LSFREIGKZ,
DRUCK_KZ_TAB,
DAT_FAKT,
PERIODE,
ST_TOUR,
STAND_NR,
STAND_ART,
V_STAND_NR,
V_STAND_ART,
PERSONALNR,
VORGANGS_ART,
VERSAND_ART,
MGRP_SA,
LI_TER_EXT_KZ,
STAND_NR1,
V_STAND_NR1,
V_STAND_ART1,
BST,
ZVA,
KOSTENSTELLE,
PERIODE1,
MIETFREIE_TAGE,
MINDEST_BETR/100,
AUSBUCH_BETR/100,
ZAHL_KOND_MET,
AUSLIEFER_GRP,
WERKSNR,
KENNZLEISTE_X2,
SDB_KZ,
BONUS_KDGR_1,
BONUS_KDGR_2,
BONUS_KDGR_3,
RG_SL,
KENNZL_X4,
WERTGRENZE/100,
WERTGRENZE_KZ,
MET_ZU_SATZ/100,
PROV_SPLIT_TAB3_1/10,
PROV_SPLIT_TAB3_2/10,
PROV_SPLIT_TAB3_3/10,
INFO_DAT,
UEB_PROZ/10,
UNT_PROZ/10,
KENNZLEISTE3,
HK_PREISLISTE,
KOMM_KZ,
KENNZLEISTE4,
QS_STATUS_VON,
QS_STATUS_BIS,
BEHAELTER,
KENNZLEISTE5,
BEGIN_GJ,
KENNZLEISTE6,
ERLKTO_IND,
MIET_STAND/100,
MIET_NV_TAGE/100,
MIET_FAKT_TAGE/100,
MIET_NV_NR,
KENNZLEISTE7,
GB_UB,
VERSICH_LIM/100,
LPLATZ,
RESERVE,
KENNZLEISTE_X10,
ABHOL_TAG_TAB,
FZ_CHECK,
KD_SICHGRP,
LETZT_DAT_LOAD,
LETZT_DAT_FABU,
BEISTELL_LORT,
LPLATZ_BEH_ZU,
PREIS_FIND_DAT,
EDL_SR_KZ,
RESERVE2,
LOAD_FROZEN_ZONE,
RESERVEFELD30_1,
RESERVEFELD30_2,
RESERVEFELD30_3,
RESERVEFELD30_4,
RESERVEFELD30_5,
RESERVEFELD30_6,
RESERVEFELD30_7,
RESERVEFELD30_8,
RESERVEFELD30_9,
RESERVEFELD30_10,
RESERVEFELDDIG_1,
RESERVEFELDDIG_2,
RESERVEFELDDIG_3,
RESERVEFELDDIG_4,
RESERVEFELDDIG_5,
RESERVEFELDDAT_1,
RESERVEFELDDAT_2,
RESERVEFELDDAT_3,
RESERVEFELDDAT_4,
RESERVEFELDDAT_5,
RESERVEFELD_X2_1,
RESERVEFELD_X2_2,
RESERVEFELD_X2_3,
RESERVEFELD_X2_4,
RESERVEFELD_X2_5,
PREISEINH,
UNTERWEGS_KZ,
AUFTR_KTO_NR,
PERSNR2,
PERSNR3,
TERMIN_FIX_KZ,
PRUEFGRUPPE,
VERTRIEBS_STATUS,
VERTRIEBS_GEBIET,
RES_X4_1,
RES_X4_2,
RES_X4_3,
RES_X4_4,
JAHRESUMSATZ/100,
JU_FW_CD,
WMJW_DATUM,
DAT_GUELTIG_VON,
FRIST_LTKZ_E,
FRIST_LTKZ_E_SL,
FRIST_LTKZ_B,
FRIST_LTKZ_B_SL,
FRIST_LTKZ_M,
FRIST_LTKZ_M_SL,
FRACHTFREI_GRENZ/100,
PREISBASISDATUM,
KD_ABC_KL,
EXT_PKST_IDENT,
SAP_CUST_NUMBER,
CREDIT_STATUS,
CUST_HIERARCHY,
CUST_EMAIL_ID
FROM KD01_D;
----------------------------------------------------------------
 ------------------------------------------------------------
CREATE TABLE "DBXNET"."VERT_D" 
   (	"KTO_NR" NUMBER(10,0), 
	"PROV_GRP" VARCHAR2(4), 
	"MWST_KZ" NUMBER(5,0), 
	"TEL_TAB6_1" VARCHAR2(16), 
	"TEL_TAB6_2" VARCHAR2(16), 
	"TEL_TAB6_3" VARCHAR2(16), 
	"TEL_TAB6_4" VARCHAR2(16), 
	"TEL_TAB6_5" VARCHAR2(16), 
	"TEL_TAB6_6" VARCHAR2(16), 
	"VERKN_KZ" VARCHAR2(10), 
	"SPR_SL" NUMBER(5,0), 
	"STAT_KZ" VARCHAR2(2), 
	"LETZT_AEND" NUMBER(10,0), 
	"USERX" VARCHAR2(8), 
	"ABRECH_ZEIT" VARCHAR2(2), 
	"FA_KTO_NR" CHAR(14), 
	"VERT_USER" VARCHAR2(8), 
	"ORDAT_SEQUENCE" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SAP_CUST_NUMBER" VARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;


----------------------------------------------------------------

CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."VERT_DV" ("KTO_NR", "PROV_GRP", "MWST_KZ", "TEL_TAB6_1", "TEL_TAB6_2", "TEL_TAB6_3", "TEL_TAB6_4", "TEL_TAB6_5", "TEL_TAB6_6", "VERKN_KZ", "SPR_SL", "STAT_KZ", "LETZT_AEND", "USERX", "ABRECH_ZEIT", "FA_KTO_NR", "VERT_USER", "ORDAT_SEQUENCE", "SAP_CUST_NUMBER") AS 
  SELECT
KTO_NR,
PROV_GRP,
MWST_KZ,
TEL_TAB6_1,
TEL_TAB6_2,
TEL_TAB6_3,
TEL_TAB6_4,
TEL_TAB6_5,
TEL_TAB6_6,
VERKN_KZ,
SPR_SL,
STAT_KZ,
LETZT_AEND,
USERX,
ABRECH_ZEIT,
FA_KTO_NR,
VERT_USER,
ORDAT_SEQUENCE,
SAP_CUST_NUMBER
FROM VERT_D;
-------------------------------------------------------------------
CREATE TABLE "DBXNET"."UMPO_D" 
   (	"FA_KTO_NR" CHAR(14), 
	"TEILENR" CHAR(12), 
	"RG_NR" CHAR(12), 
	"AUF_NR" CHAR(12), 
	"STAT_DAT" NUMBER(10,0), 
	"STAT_MENGE" NUMBER(11,0), 
	"FW_CD" VARCHAR2(6), 
	"KL_KZ" VARCHAR2(2), 
	"VEEH" VARCHAR2(16), 
	"ORDAT_SEQUENCE" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SAP_CUST_NUMBER" VARCHAR2(200), 
	"GES_WERT_FW" NUMBER(19,0), 
	"GES_WERT_EUR" NUMBER(11,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;


CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."UMPO_DV" ("FA_GUBKTO", "FA_KTO_NR", "FA_TEILENR", "TEILENR", "TNRDUMMY", "PACK_POS_NR", "RG_NR", "AUF_NR", "FA_NR", "POS_NR_GES", "SATZ_ART", "STAT_DAT", "STAT_MENGE", "NETTO_PR", "BRUTTO_PR", "GES_WERT_FW", "GES_WERT_EUR", "FW_CD", "KL_KZ", "KENNZLX4", "GS_CODE", "LORT", "VERS_PLZ_LA", "IDENTNRST", "VERTRETER", "VERK_GEBIET", "VEEH", "KDGR", "PROG_STATUS", "DWH_TRANSFER", "VKWG", "WUNSCHTERMIN", "FA_WERBE_NR", "LISTUNG", "FREMDUMS", "AUFTR_KANAL", "ORDAT_SEQUENCE", "SAP_CUST_NUMBER") AS 
  SELECT
FA_GUBKTO,
FA_KTO_NR,
FA_TEILENR,
TEILENR,
TNRDUMMY,
PACK_POS_NR,
RG_NR,
AUF_NR,
FA_NR,
POS_NR_GES,
SATZ_ART,
STAT_DAT,
STAT_MENGE,
NETTO_PR/100,
BRUTTO_PR/100,
GES_WERT_FW/100,
GES_WERT_EUR/100,
FW_CD,
KL_KZ,
KENNZLX4,
GS_CODE,
LORT,
VERS_PLZ_LA,
IDENTNRST,
VERTRETER,
VERK_GEBIET,
VEEH,
KDGR,
PROG_STATUS,
DWH_TRANSFER,
VKWG,
WUNSCHTERMIN,
FA_WERBE_NR,
LISTUNG,
FREMDUMS,
AUFTR_KANAL,
ORDAT_SEQUENCE,
SAP_CUST_NUMBER
FROM UMPO_D;
---------------------------------------------------------------
CREATE TABLE "DBXNET"."PERSAD_D" 
   (	"FA_KTO_NR" CHAR(14), 
	"PERS_KZ" VARCHAR2(4), 
	"ANREDE_SL" NUMBER(5,0), 
	"BEZ_1" VARCHAR2(35), 
	"BEZ_2" VARCHAR2(35), 
	"BEZ_3" VARCHAR2(35), 
	"PLZ_LA" VARCHAR2(4), 
	"PLZ" VARCHAR2(10), 
	"STR" VARCHAR2(35), 
	"ORT" VARCHAR2(35), 
	"INDEX1" CHAR(8), 
	"INDEX2" CHAR(8), 
	"INDEX3" CHAR(8), 
	"INDEX4" CHAR(8), 
	"INDEX5" CHAR(8), 
	"INDEX6" CHAR(8), 
	"INDEX7" CHAR(8), 
	"INDEX8" CHAR(8), 
	"LETZT_AEND" NUMBER(10,0), 
	"USERX" VARCHAR2(8), 
	"STAT_KZ" VARCHAR2(2), 
	"TELE_NR" VARCHAR2(20), 
	"TELEX" VARCHAR2(20), 
	"KUND_GR" VARCHAR2(2), 
	"PERS_SSI" NUMBER(5,0), 
	"VERB_UNT" VARCHAR2(2), 
	"KTO_NR" NUMBER(10,0), 
	"IDENTNRST" VARCHAR2(16), 
	"ZUS_BUF" VARCHAR2(60), 
	"ZAHL_KOND_NR" VARCHAR2(6), 
	"LIMIT_1" NUMBER(15,0), 
	"LIMIT_2" NUMBER(15,0), 
	"LIMIT_3" NUMBER(15,0), 
	"ILN_NR" CHAR(14), 
	"REGION" VARCHAR2(4), 
	"STEUER_NR" VARCHAR2(20), 
	"STEUER_NR2" VARCHAR2(20), 
	"RAZA_KOND_NR" VARCHAR2(6), 
	"AEND_ZEIT" NUMBER(10,0), 
	"KREDITVER_ID" VARCHAR2(12), 
	"KREDSTAND_UEFAEL" NUMBER(15,0), 
	"KRED_FAELL_TAB_1" NUMBER(15,0), 
	"KRED_FAELL_TAB_2" NUMBER(15,0), 
	"KRED_FAELL_TAB_3" NUMBER(15,0), 
	"KRED_FAELL_TAB_4" NUMBER(15,0), 
	"KRED_FAELL_TAB_5" NUMBER(15,0), 
	"CREFO_NR" NUMBER(19,0), 
	"CREFO_STAT_KZ" VARCHAR2(2), 
	"RFORM" VARCHAR2(4), 
	"HANDEL_REG_NR" VARCHAR2(50), 
	"DUNS_NR" NUMBER(10,0), 
	"SANKTL_PRSTAT" VARCHAR2(2), 
	"SANKTL_PRDAT" NUMBER(10,0), 
	"CTP_STATUS" VARCHAR2(2), 
	"EIG_KD_NR30" VARCHAR2(30), 
	"LAENGENGRAD" NUMBER(10,0), 
	"BREITENGRAD" NUMBER(10,0), 
	"SALES_ORG" VARCHAR2(45), 
	"DIST_CHNL" VARCHAR2(45), 
	"DIV" VARCHAR2(45), 
	"SAP_CUST_NUMBER" VARCHAR2(100), 
	"PERSAD_SEQ" NUMBER(9,0), 
	"CONTACT_PERSON" VARCHAR2(100), 
	"IS_ACTIVE" NUMBER(1,0), 
	"VATIDENT" VARCHAR2(20), 
	"INDUSTRY_TYPE" VARCHAR2(20), 
	"CREDIT_STATUS" VARCHAR2(200), 
	"CREDIT_LIM_CUR" VARCHAR2(200), 
	"ORDAT_SEQUENCE" NUMBER(10,0), 
	 CONSTRAINT "CKPER" CHECK (IS_ACTIVE IN (0,1)) ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
  ----------------------------------------------------------
  CREATE SEQUENCE DBXNET.PERSAD_D_SEQ INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999999999999 NOCYCLE CACHE 20 NOORDER ;
  -----------------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "DBXNET"."PERSAD_D_TRIGG" 
                BEFORE INSERT ON DBXNET.PERSAD_D
                FOR EACH ROW
                BEGIN
                        SELECT
                                PERSAD_D_SEQ.NEXTVAL
                        INTO
                                :NEW.ORDAT_SEQUENCE
                        FROM
                                DUAL;
                END;

ALTER TRIGGER "DBXNET"."PERSAD_D_TRIGG" ENABLE;

------------------------------------------------------------------------------------------------

CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."PERSAD_DV" ("FA_KTO_NR", "PERS_KZ", "ANREDE_SL", "BEZ_1", "BEZ_2", "BEZ_3", "PLZ_LA", "PLZ", "STR", "ORT", "INDEX1", "INDEX2", "INDEX3", "INDEX4", "INDEX5", "INDEX6", "INDEX7", "INDEX8", "LETZT_AEND", "USERX", "STAT_KZ", "TELE_NR", "TELEX", "KUND_GR", "PERS_SSI", "VERB_UNT", "KTO_NR", "IDENTNRST", "ZUS_BUF", "ZAHL_KOND_NR", "LIMIT_1", "LIMIT_2", "LIMIT_3", "ILN_NR", "REGION", "STEUER_NR", "STEUER_NR2", "RAZA_KOND_NR", "AEND_ZEIT", "KREDITVER_ID", "KREDSTAND_UEFAEL", "KRED_FAELL_TAB_1", "KRED_FAELL_TAB_2", "KRED_FAELL_TAB_3", "KRED_FAELL_TAB_4", "KRED_FAELL_TAB_5", "CREFO_NR", "CREFO_STAT_KZ", "RFORM", "HANDEL_REG_NR", "DUNS_NR", "SANKTL_PRSTAT", "SANKTL_PRDAT", "CTP_STATUS", "EIG_KD_NR30", "LAENGENGRAD", "BREITENGRAD", "SALES_ORG", "DIST_CHNL", "DIV", "SAP_CUST_NUMBER", "PERSAD_SEQ", "CONTACT_PERSON", "IS_ACTIVE", "VATIDENT", "INDUSTRY_TYPE", "CREDIT_STATUS", "CREDIT_LIM_CUR") AS 
  SELECT
        FA_KTO_NR           ,
        PERS_KZ             ,
        ANREDE_SL           ,
        BEZ_1               ,
        BEZ_2               ,
        BEZ_3               ,
        PLZ_LA              ,
        PLZ                 ,
        STR                 ,
        ORT                 ,
        INDEX1              ,
        INDEX2              ,
        INDEX3              ,
        INDEX4              ,
        INDEX5              ,
        INDEX6              ,
        INDEX7              ,
        INDEX8              ,
        LETZT_AEND          ,
        USERX               ,
        STAT_KZ             ,
        TELE_NR             ,
        TELEX               ,
        KUND_GR             ,
        PERS_SSI            ,
        VERB_UNT            ,
        KTO_NR              ,
        IDENTNRST           ,
        ZUS_BUF             ,
        ZAHL_KOND_NR        ,
        LIMIT_1       ,
        LIMIT_2      ,
        LIMIT_3        ,
        ILN_NR              ,
        REGION              ,
        STEUER_NR           ,
        STEUER_NR2          ,
        RAZA_KOND_NR        ,
        AEND_ZEIT           ,
        KREDITVER_ID        ,
        KREDSTAND_UEFAEL/100,
        KRED_FAELL_TAB_1/100,
        KRED_FAELL_TAB_2/100,
        KRED_FAELL_TAB_3/100,
        KRED_FAELL_TAB_4/100,
        KRED_FAELL_TAB_5/100,
        CREFO_NR            ,
        CREFO_STAT_KZ       ,
        RFORM               ,
        HANDEL_REG_NR       ,
        DUNS_NR             ,
        SANKTL_PRSTAT       ,
        SANKTL_PRDAT        ,
        CTP_STATUS          ,
        EIG_KD_NR30         ,
        LAENGENGRAD/1000000 ,
        BREITENGRAD/1000000 ,
        SALES_ORG           ,
        DIST_CHNL           ,
        DIV                 ,
        SAP_CUST_NUMBER     ,
        PERSAD_SEQ          ,
        CONTACT_PERSON,
		IS_ACTIVE,
		VATIDENT,
		INDUSTRY_TYPE,
		CREDIT_STATUS,
		CREDIT_LIM_CUR
FROM
        PERSAD_D;


-------------------------------------------------------------------
CREATE TABLE "DBXNET"."AUKO_D" 
   (	"AUF_NR" VARCHAR2(100), 
	"AU_NR" VARCHAR2(100), 
	"AU_DAT" NUMBER(10,0), 
	"STATUS_KZ" NUMBER(5,0), 
	"FIRM_NR" VARCHAR2(6), 
	"KTO_NR" NUMBER(10,0), 
	"AUF_DAT" NUMBER(10,0), 
	"SPR_SL" NUMBER(5,0), 
	"SAP_CUST_NUMBER" VARCHAR2(100), 
	"SAP_ORDER_NUMBER" VARCHAR2(100), 
	"ORDERID" NUMBER(10,0), 			
	"PO_NUMBER" VARCHAR2(30)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
--------------------------------------------------------------------

CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."AUKO_DV" ("AUF_NR", "AU_NR", "AU_DAT", "STATUS_KZ", "FIRM_NR", "KTO_NR", "AUF_DAT", "SPR_SL", "SAP_CUST_NUMBER", "SAP_ORDER_NUMBER") AS 
  SELECT
        "AUF_NR"   ,
        "AU_NR"    ,
        "AU_DAT"   ,
        "STATUS_KZ",
        "FIRM_NR"  ,
        "KTO_NR"   ,
        "AUF_DAT"  ,
        "SPR_SL"   ,
        "SAP_CUST_NUMBER",
		"SAP_ORDER_NUMBER"
FROM
        AUKO_D;
--------------------------------------------------------------------

--------------------------------------------------------------------

CREATE TABLE "DBXNET"."AUPO_D" 
   (	"POS_NR_GES" CHAR(18), 
	"AUF_NR" VARCHAR2(100), 
	"SACH_NR" VARCHAR2(100), 
	"SACH_BEZ_1" VARCHAR2(30), 
	"STATUS_KZ" NUMBER(5,0), 
	"GES_MENG" NUMBER(11,0), 
	"RES_MENGE" NUMBER(11,0), 
	"LI_MENG" NUMBER(11,0), 
	"LI_TER_TAG" NUMBER(10,0), 
	"NETTO_PR_FW" NUMBER(15,0), 
	"PACK_NR" VARCHAR2(100), 
	"RG_NR" VARCHAR2(100), 
	"RG_DAT" NUMBER(10,0), 
	"PAKET_IDENT" VARCHAR2(256), 
	"SPEDITION" NUMBER(10,0), 
	"INV_URL" VARCHAR2(4000), 
	"DN_URL" VARCHAR2(4000), 
	"POD_URL" VARCHAR2(4000), 
	"CARRIER_NAME" VARCHAR2(256), 
	"POS_NR" VARCHAR2(100) DEFAULT 'SBD_PARTS' NOT NULL ENABLE, 
	"AUPO_SEQ" NUMBER(9,0), 
	"SAP_ORDER_NUMBER" VARCHAR2(100), --  TODO: FOREIGN KEY FOR dbxnet.AUKO_D.SAP_ORDER_NUMBER
	"SHIPPING_COSTS" NUMBER(10,2), 
	"ORDERID" NUMBER(10,0), 
	"PO_NUMBER" VARCHAR2(30)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
 ------------------------------------------------------------------
 CREATE SEQUENCE DBXNET.AUPO_D_SEQ INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999999999999 NOCYCLE CACHE 20 NOORDER ;
 -------------------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "DBXNET"."AUPO_D_TRIGG" 
BEFORE INSERT ON DBXNET.AUPO_D
FOR EACH ROW
BEGIN
        SELECT
                AUPO_D_SEQ.NEXTVAL
        INTO
                :NEW.AUPO_SEQ
        FROM
                DUAL;
END;
--------------------------------------------------------------------
ALTER TRIGGER "DBXNET"."AUPO_D_TRIGG" ENABLE;
--------------------------------------------------------------------

CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."AUPO_DV" ("POS_NR_GES", "AUF_NR", "SACH_NR", "SACH_BEZ_1", "STATUS_KZ", "GES_MENG", "RES_MENGE", "LI_MENG", "LI_TER_TAG", "NETTO_PR_FW", "PACK_NR", "RG_NR", "RG_DAT", "PAKET_IDENT", "SPEDITION", "INV_URL", "DN_URL", "POD_URL", "CARRIER_NAME", "POS_NR", "AUPO_SEQ", "SAP_ORDER_NUMBER", "SHIPPING_COSTS", "PO_NUMBER", "ORDERID") AS 
  SELECT
        "POS_NR_GES"      ,
        "AUF_NR"          ,
        "SACH_NR"         ,
        "SACH_BEZ_1"      ,
        "STATUS_KZ"       ,
        "GES_MENG"        ,
        "RES_MENGE"       ,
        "LI_MENG"         ,
        "LI_TER_TAG"      ,
        "NETTO_PR_FW"     ,
        "PACK_NR"         ,
        "RG_NR"           ,
        "RG_DAT"          ,
        "PAKET_IDENT"     ,
        "SPEDITION"       ,
        "INV_URL"         ,
        "DN_URL"          ,
        "POD_URL"         ,
        "CARRIER_NAME"    ,
        "POS_NR"          ,
        "AUPO_SEQ"        ,
        "SAP_ORDER_NUMBER",
        "SHIPPING_COSTS",
		"PO_NUMBER",
		"ORDERID"
FROM
        AUPO_D;
--------------------------------------------------------------------
----CATEGORY 2 ENDS-----------------------------------------------

-------------------------------------------------------------------
------CATEGORY 3 : DBXNET TABLES THAT WERE ALTERED
----****************************GAZK_D***************-------------
ALTER TABLE DBXNET.GAZK_D DROP COLUMN FA_NR;
-----------------------------------------------------------------
DROP INDEX GAZK_D_U01_MTD;
------------------------------------------------------------------
CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."GAZK_DV" ("TEILENR", "TNR_TYP", "MAX_BETRAG", "KENNZLX4", "LETZT_AEND", "USERX", "ORDAT_SEQUENCE") AS 
  SELECT
        TEILENR       ,
        TNR_TYP       ,
        MAX_BETRAG/100,
        KENNZLX4      ,
        LETZT_AEND    ,
        USERX         ,
        ORDAT_SEQUENCE
FROM
        GAZK_D;
--------------------------------------------------------------------
GRANT SELECT ON "DBXNET"."GAZK_DV" TO "FOSS_SELECT";
------------------------------------------------------------
CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."XNVA_DV" ("FA_NR", "VKBEREICH", "BER_GRP", "KON_SL", "TEXTX200", "ZUSTEXTX512", "REIHENFOLGE", "KENNZLX8", "LOGO", "ORDAT_SEQUENCE", "SHIPPING_OPTIONS", "CONDITION_TYPE", "PARTNER_NUMBER", "PRICE") AS 
  SELECT
        FA_NR      ,
        VKBEREICH  ,
        BER_GRP    ,
        KON_SL     ,
        TEXTX200   ,
        ZUSTEXTX512,
        REIHENFOLGE,
        KENNZLX8   ,
        LOGO       ,
        ORDAT_SEQUENCE,
		SHIPPING_OPTIONS,
		CONDITION_TYPE,
		PARTNER_NUMBER,
		PRICE
		FROM XNVA_D;

GRANT SELECT ON "DBXNET"."XNVA_DV" TO "FOSS_SELECT";
------------------------------------------------------------------
-----ULI_M----------------------
ALTER TABLE DBXNET.ULI_M ADD (	SAP_CUST_NUMBER VARCHAR2(200), 
	SALES_ORG VARCHAR2(45), 
	SAP_VERT_NR VARCHAR2(200));
CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."ULI_MV" ("BENUTZER", "PASSWORD", "BER_GRP", "BER_GRP_CULI", "FA_NR", "FA_NR_KONSL", "ET_FW_CD", "VEEH", "VERT_NR", "KTO_NR", "ADRESSE_1", "ADRESSE_2", "ADRESSE_3", "ADRESSE_4", "ADRESSE_5", "KONTAKTPERSON", "MAILADRESSE", "TELEFON", "TELEFAX", "LAST_LOGON", "ANZ_LOGON_OK", "ANZ_LOGON_NOK", "KENNZLX50", "STATUS_KZ", "LANGUAGEID", "LANG_BULL_PNTS", "DATUMSFORMAT", "DAT_FIRST_WC", "DAT_FIRST_ORDER", "MASTERUSER", "DAT_REGISTER", "LANGUAGEID_XCS", "PIM_LANGUAGEID", "ORDAT_SEQUENCE", "SAP_CUST_NUMBER") AS 
  SELECT
BENUTZER,
PASSWORD,
BER_GRP,
BER_GRP_CULI,
FA_NR,
FA_NR_KONSL,
ET_FW_CD,
VEEH,
VERT_NR,
KTO_NR,
ADRESSE_1,
ADRESSE_2,
ADRESSE_3,
ADRESSE_4,
ADRESSE_5,
KONTAKTPERSON,
MAILADRESSE,
TELEFON,
TELEFAX,
LAST_LOGON,
ANZ_LOGON_OK,
ANZ_LOGON_NOK,
KENNZLX50,
STATUS_KZ,
LANGUAGEID,
LANG_BULL_PNTS,
DATUMSFORMAT,
DAT_FIRST_WC,
DAT_FIRST_ORDER,
MASTERUSER,
DAT_REGISTER,
LANGUAGEID_XCS,
PIM_LANGUAGEID,
ORDAT_SEQUENCE,
SAP_CUST_NUMBER
FROM ULI_M;

GRANT SELECT ON "DBXNET"."ULI_MV" TO "FOSS_SELECT";	
	
------***************************IAP****************--------------
 ALTER TABLE DBXNET.IAP_D MODIFY ALTE_TEILENR VARCHAR2(40);
 ALTER TABLE DBXNET.IAP_D MODIFY NEUE_TEILENR VARCHAR2(40);
 ---------------------------------------------------------------
ALTER TABLE DBXNET.IAK_D MODIFY  FA_NR CHAR(6) DEFAULT NULL;-
---------------------------------------------------------------------
ALTER TABLE DBXNET.IAK_D MODIFY FA_KTO_NR CHAR(14) DEFAULT NULL;-----------------------------------------------------------
ALTER TABLE DBXNET.IAK_D MODIFY  FOSS_AUF_NR CHAR(12) DEFAULT NULL;---------------------------------------------------------
ALTER TABLE DBXNET.IAK_D DROP COLUMN STATUS_ERP;
-----------------------------------------------------------
CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."IAK_DV" ("ORDERID", "FA_NR", "FA_KTO_NR", "BENUTZERX12", "FW_CD",  "FOSS_AUF_NR", "ORDAT_SEQUENCE", "ORDER_TYPE") AS 
  SELECT
ORDERID,
FA_NR,
FA_KTO_NR,
BENUTZERX12,
FW_CD,
FOSS_AUF_NR,
ORDAT_SEQUENCE,
ORDER_TYPE
FROM IAK_D;
-------------------------------------------------------------------
ALTER TABLE DBXNET.AUKO_D ADD CONSTRAINT AUKO_PRIMARY PRIMARY KEY (SAP_ORDER_NUMBER);

ALTER TABLE DBXNET.AUKO_D ADD FOREIGN KEY (ORDERID) REFERENCES DBXNET.IAK_D(ORDERID);

--DROP TABLE DBXNET.AUPD_D;

ALTER TABLE DBXNET.AUPO_D ADD FOREIGN KEY (SAP_ORDER_NUMBER) REFERENCES DBXNET.AUKO_D(SAP_ORDER_NUMBER);

ALTER TABLE DBXNET.CREDITRECEIVABLES ADD CONSTRAINT CREDITRECEIVABLES101 
UNIQUE  (SAP_CUST_NUMBER, DOC_NUMBER, DOC_TYPE, TRX_TYPE);

ALTER TABLE DBXNET.CREDITRECEIVABLES_T ADD CONSTRAINT CREDITRECEIVABLEST101 
UNIQUE  (SAP_CUST_NUMBER, DOC_NUMBER, DOC_TYPE, TRX_TYPE);

ALTER TABLE DBXNET.CUST_BRAND ADD CONSTRAINT CUSTBRAND101 UNIQUE (SAP_CUST_NUMBER, BRAND_CODE);

DROP TABLE DBXNET.DFLN_D_X;

DROP VIEW DBXNET.DFLN_MTD_DV;

DROP TABLE DBXNET.FIRMP_D;

DROP VIEW DBXNET.FIRMP_DV;

ALTER TABLE DBXNET.IAK_D MODIFY  FA_NR CHAR(6) DEFAULT NULL;
ALTER TABLE DBXNET.IAK_D MODIFY FA_KTO_NR CHAR(14) DEFAULT NULL;
ALTER TABLE DBXNET.IAK_D MODIFY  FOSS_AUF_NR CHAR(12) DEFAULT NULL;
ALTER TABLE DBXNET.IAK_D DROP COLUMN STATUS_ERP;



CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."IAK_DV" ("ORDERID", "FA_NR", "FA_KTO_NR", "BENUTZERX12", "FW_CD",  "FOSS_AUF_NR", "ORDAT_SEQUENCE", "ORDER_TYPE") AS 
  SELECT
ORDERID,
FA_NR,
FA_KTO_NR,
BENUTZERX12,
FW_CD,
FOSS_AUF_NR,
ORDAT_SEQUENCE,
ORDER_TYPE
FROM IAK_D;
--------------------------------------------------------------------
--DELETING DUPLICATE ROWS FROM IAP_D
DELETE FROM DBXNET.IAP_D WHERE ORDERID IN (SELECT ORDERID  FROM
        DBXNET.IAK_D
WHERE
        ROWID IN
        (
                SELECT
                        ROWID
                FROM
                        (
                                SELECT
                                        ROW_NUMBER() OVER
                                                          (
                                                                  PARTITION BY SAP_ORDER_NUMBER
                                                                  ORDER BY SAP_ORDER_NUMBER
                                                          )
                                        NBLINES
                                FROM
                                        DBXNET.IAK_D) T2
                WHERE
                        NBLINES > 1) AND SAP_ORDER_NUMBER IS NOT NULL);
						
--DELETING DUPLIATE FROM IAK_D

DELETE FROM DBXNET.IAK_D WHERE ORDERID IN (SELECT ORDERID  FROM
        DBXNET.IAK_D
WHERE
        ROWID IN
        (
                SELECT
                        ROWID
                FROM
                        (
                                SELECT
                                        ROW_NUMBER() OVER
                                                          (
                                                                  PARTITION BY SAP_ORDER_NUMBER
                                                                  ORDER BY SAP_ORDER_NUMBER
                                                          )
                                        NBLINES
                                FROM
                                        DBXNET.IAK_D) T2
                WHERE
                        NBLINES > 1) AND SAP_ORDER_NUMBER IS NOT NULL);
-----------------------------------------------------------------------------------

ALTER TABLE DBXNET.IAK_D ADD CONSTRAINT UNI_SAP_ORDER UNIQUE (SAP_ORDER_NUMBER); 
------------------------------------------------------------------------------------



GRANT SELECT ON "DBXNET"."IAK_DV" TO "FOSS_SELECT";

DROP VIEW DBXNET.IAK_DVM;

DROP TABLE DBXNET.KDGR_M;

DROP TABLE DBXNET.KDGU_D;

DROP VIEW DBXNET.KDGU_DV;

DROP TABLE DBXNET.PAKO_D;

DROP VIEW DBXNET.PAKO_DV;

ALTER TABLE DBXNET.PERSAD_D ADD PRIMARY KEY (SAP_CUST_NUMBER);

DROP TRIGGER DBXNET.SAD_D_01_MTD;

DROP VIEW DBXNET.SAD_DV;

----------------------------------------------------------------
--<SD02/21/24>
--------------------------------------------------

UPDATE DBXNET.IGAK_D SET ISSERIALNUMFOUND = 0 WHERE ISSERIALNUMFOUND IS NULL;
ALTER TABLE DBXNET.IGAK_D MODIFY "ISSERIALNUMFOUND" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE;
-------------------------------------------------------
CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."TX78_DV" ("TEXT_NR_GES", "ZUS_TEXT_78", "TEXT78_IND", "LETZT_AEND", "USERX", "STAT_KZ", "TX_SUCHBEGRIFF", "ORDAT_SEQUENCE") AS 
  SELECT
TEXT_NR_GES,
ZUS_TEXT_78,
TEXT78_IND,
LETZT_AEND,
USERX,
STAT_KZ,
TX_SUCHBEGRIFF,
ORDAT_SEQUENCE
FROM TX78_D;
------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE DBXNET.DCG2_D DROP COLUMN GRUPPIERUNG2;  --TODO: NEED TO CHECK WITH FRANK IF HE ADDED SOMETHING ON PROD.
-------------------------------------------------------------------
ALTER TABLE DBXNET.DCH2_D DROP COLUMN CP_FROM_REGELNR2; --TODO: NEED TO CHECK WITH FRANK IF HE ADDED SOMETHING ON PROD.
-------------------------------------------------------------------
-- CHANGING COL TYPE & RESTORING DATA.
-------------------------------------------------------------------
CREATE TABLE DBXNET.DFFC_D_BCK AS SELECT * FROM DBXNET.DFFC_D; --TODO: NEED TO CHECK WITH DEVELOPER .
-------------------------------------------------------------------
ALTER TABLE DBXNET.DFFC_D MODIFY VERTRETER NUMBER(10,0) NULL; --TODO: NEED TO CHECK WITH DEVELOPER.
COMMIT;
-------------------------------------------------------------------
UPDATE  DBXNET.DFFC_D SET VERTRETER = NULL;
------------------------------------------------------------------
ALTER TABLE DBXNET.DFFC_D MODIFY  VERTRETER VARCHAR2(200);
------------------------------------------------------------------
BEGIN
FOR I IN (SELECT ORDAT_SEQUENCE, VERTRETER FROM DBXNET.DFFC_D_BCK) 
LOOP
UPDATE DBXNET.DFFC_D SET VERTRETER = I.VERTRETER WHERE ORDAT_SEQUENCE = I.ORDAT_SEQUENCE;
END LOOP;
END;
COMMIT;
SELECT VERTRETER FROM DBXNET.DFFC_D;
-----------------------------------------------------------------
COMMIT;
-----------------------------------------------------------------
DROP TABLE DBXNET.DFFC_D_BCK;
------------------------------------------------------------------


-------------------------------------------------------------------
CREATE TABLE DBXNET.DFOR_D_BCK AS SELECT * FROM DBXNET.DFOR_D;
-------------------------------------------------------------------
ALTER TABLE DBXNET.DFOR_D MODIFY VERTRETER NUMBER(10,0) NULL;
COMMIT;
-----------------------------------------------------------
UPDATE DBXNET.DFOR_D SET VERTRETER = NULL;
------------------------------------------------------------------
ALTER TABLE DBXNET.DFOR_D MODIFY  VERTRETER VARCHAR2(200);
------------------------------------------------------------------
BEGIN
FOR I IN (SELECT ORDAT_SEQUENCE, VERTRETER FROM DBXNET.DFOR_D_BCK) 
LOOP
UPDATE DBXNET.DFOR_D SET VERTRETER = I.VERTRETER WHERE ORDAT_SEQUENCE = I.ORDAT_SEQUENCE;
END LOOP;
END;
-----------------------------------------------------------------
COMMIT;
-----------------------------------------------------------------
DROP TABLE DBXNET.DFOR_D_BCK;
---------------------------------------------------------------------*************************DBXNET"."DFSR_D*******************
CREATE TABLE DBXNET.DFSR_D_BCK AS SELECT * FROM DBXNET.DFSR_D;
-------------------------------------------------------------------
ALTER TABLE DBXNET.DFSR_D MODIFY VERTRETER NULL;
COMMIT;
UPDATE DBXNET.DFSR_D SET VERTRETER = NULL;
------------------------------------------------------------------
ALTER TABLE DBXNET.DFSR_D MODIFY  VERTRETER VARCHAR2(200);
------------------------------------------------------------------
BEGIN
FOR I IN (SELECT ORDAT_SEQUENCE, VERTRETER FROM DBXNET.DFSR_D_BCK) 
LOOP
UPDATE DBXNET.DFSR_D SET VERTRETER = I.VERTRETER WHERE ORDAT_SEQUENCE = I.ORDAT_SEQUENCE;
END LOOP;
END;
-----------------------------------------------------------------
COMMIT;
-----------------------------------------------------------------
DROP TABLE DBXNET.DFSR_D_BCK;
--***************************************************************
--*****************************DBXNET"."DFST_D"******************
CREATE TABLE DBXNET.DFST_D_BCK AS SELECT * FROM DBXNET.DFST_D;
-------------------------------------------------------------------
ALTER TABLE DBXNET.DFST_D MODIFY VERTRETER NULL;
COMMIT;
UPDATE DBXNET.DFST_D SET VERTRETER = NULL;
------------------------------------------------------------------
ALTER TABLE DBXNET.DFST_D MODIFY  VERTRETER VARCHAR2(200);
------------------------------------------------------------------
BEGIN
FOR I IN (SELECT ORDAT_SEQUENCE, VERTRETER FROM DBXNET.DFST_D_BCK) 
LOOP
UPDATE DBXNET.DFST_D SET VERTRETER = I.VERTRETER WHERE ORDAT_SEQUENCE = I.ORDAT_SEQUENCE;
END LOOP;
END;
-----------------------------------------------------------------
COMMIT;
-----------------------------------------------------------------
DROP TABLE DBXNET.DFST_D_BCK;
--********************************************************--------
------------------------------------------------------------------
------***************************IAP****************--------------
 ALTER TABLE DBXNET.IAP_D MODIFY ALTE_TEILENR VARCHAR2(40);
 ALTER TABLE DBXNET.IAP_D MODIFY NEUE_TEILENR VARCHAR2(40);
 ----------------------------------------------------------------

------------------------------------------------------------------
------------------------*************IGAK_D****************-------
ALTER TABLE DBXNET.IGAK_D MODIFY FA_KTO_NR CHAR(14);
--FOSS_AUF_NR
ALTER TABLE DBXNET.IGAK_D MODIFY FOSS_AUF_NR CHAR(12);
 ALTER TABLE DBXNET.IGAK_D ADD  (SAP_CREDIT_NUMBER VARCHAR2(60), 
	CREDIT_NOTE_URL VARCHAR2(100), 
	ISSERIALNUMFOUND NUMBER(1,0) CONSTRAINT "CKIAGDSER" CHECK (ISSERIALNUMFOUND IN (0,1)) ENABLE, 
	SAP_CUST_NUMBER VARCHAR2(200), 
	SALES_ORG VARCHAR2(100), 
	CREDIT_BLOB BLOB);
-----------------------------------------------------------------

  ----------------------------------------------------------------
  CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."IGAK_DV" ("ORDERID", "FA_NR", "FA_KTO_NR", "BENUTZERX12", "AU_NR", "FW_CD", "EK_ADR_1", "EK_ADR_2", "EK_ADR_3", "EK_STR", "EK_LKZ", "EK_PLZ", "EK_ORT", "EK_TEL_NR", "EK_MAILADRESSE", "REP_GERAET", "LORT_REP_GERAET", "REP_SERIENNR", "FAHR_GEST_NR", "KAUFDATUM", "BETRIEBSHRS", "REP_AUF_NR", "DAT_REP_AN", "MODELLNR_MOTOR", "TYPNR_MOTOR", "SERIENNR_MOTOR", "TXB_SCHADEN", "TXB_ARBEITEN", "TXB_SONSTIGES", "TXB_KOMM", "ARB_ZEIT_UR", "ARB_ZEIT", "ABZ_KZ", "PNR_ABZ", "KM_GEFAHREN_UR", "KM_GEFAHREN", "PNR_KMG", "STATUS_KZ", "STATUS_MAILVS", "FEHLERCODE", "FEHLERCODE_T", "ERF_DATUM", "FOSS_AUF_NR", "KL_KZ", "REF_AUF_NR", "LAST_MOD_DATE", "AU_DAT", "LAST_MOD_TIME", "PROG_IDENT", "KENNZLX4", "MWST_STSL", "NEBK_SL_1", "NEBK_SL_2", "NEBK_SL_3", "NEBK_PR_1", "NEBK_PR_2", "NEBK_PR_3", "ADMINUSER", "DAT_FR_KUNDE", "DAT_FR_SACHB", "DAT_FRAGE_SB", "GARANTIE_OK", "GARANTIE_KZ", "WARRANTYTIMEFLG", "SHIPPINGTIMEFLG", "FIXED_BY", "REP_WERKSTATT", "TICKETNR", "ORDAT_SEQUENCE", "ISSERIALNUMFOUND", "SALES_ORG") AS 
  SELECT
ORDERID,
FA_NR,
FA_KTO_NR,
BENUTZERX12,
AU_NR,
FW_CD,
EK_ADR_1,
EK_ADR_2,
EK_ADR_3,
EK_STR,
EK_LKZ,
EK_PLZ,
EK_ORT,
EK_TEL_NR,
EK_MAILADRESSE,
REP_GERAET,
LORT_REP_GERAET,
REP_SERIENNR,
FAHR_GEST_NR,
KAUFDATUM,
BETRIEBSHRS,
REP_AUF_NR,
DAT_REP_AN,
MODELLNR_MOTOR,
TYPNR_MOTOR,
SERIENNR_MOTOR,
TXB_SCHADEN,
TXB_ARBEITEN,
TXB_SONSTIGES,
TXB_KOMM,
ARB_ZEIT_UR,
ARB_ZEIT,
ABZ_KZ,
PNR_ABZ,
KM_GEFAHREN_UR,
KM_GEFAHREN,
PNR_KMG,
STATUS_KZ,
STATUS_MAILVS,
FEHLERCODE,
FEHLERCODE_T,
ERF_DATUM,
FOSS_AUF_NR,
KL_KZ,
REF_AUF_NR,
LAST_MOD_DATE,
AU_DAT,
LAST_MOD_TIME,
PROG_IDENT,
KENNZLX4,
MWST_STSL,
NEBK_SL_1,
NEBK_SL_2,
NEBK_SL_3,
NEBK_PR_1/100,
NEBK_PR_2/100,
NEBK_PR_3/100,
ADMINUSER,
DAT_FR_KUNDE,
DAT_FR_SACHB,
DAT_FRAGE_SB,
GARANTIE_OK,
GARANTIE_KZ,
WARRANTYTIMEFLG,
SHIPPINGTIMEFLG,
FIXED_BY,
REP_WERKSTATT,
TICKETNR,
ORDAT_SEQUENCE,
ISSERIALNUMFOUND,
SALES_ORG
FROM IGAK_D;

GRANT SELECT ON "DBXNET"."IGAK_DV" TO "FOSS_SELECT";
-----------------------------------------------------------------
--------------------*****************IGAP******************
ALTER TABLE DBXNET.IGAP_D MODIFY TEILENR VARCHAR2(200);
-----------------------------------------------------------------
ALTER TABLE DBXNET.IGTA_D MODIFY TEILENR VARCHAR2(200);
------------------------------------------------------------------
CREATE TABLE DBXNET.SLBK_D_BCK AS SELECT * FROM DBXNET.SLBK_D;
-------------------------------------------------------------------
ALTER TABLE DBXNET.SLBK_D MODIFY VK_PR_FW NULL;
UPDATE DBXNET.SLBK_D SET VK_PR_FW = NULL;
------------------------------------------------------------------
----------------------------------------------------------------
  --------------*******************SLBK_D************--------------
 ALTER TABLE DBXNET.SLBK_D MODIFY KTO_NR NUMBER(10,0);--TODO: Why we are modifying the KTO_NR?????
 ALTER TABLE DBXNET.SLBK_D MODIFY TEILENR VARCHAR2(100); 
 ALTER TABLE DBXNET.SLBK_D MODIFY VKBEREICH VARCHAR2(4);
 ALTER TABLE DBXNET.SLBK_D MODIFY STATUS_KZ NUMBER(5,0);
 ALTER TABLE DBXNET.SLBK_D MODIFY LI_TER_TAG NUMBER(10,0) DEFAULT 0;
 ALTER TABLE DBXNET.SLBK_D MODIFY 	TIMESTAMP_RESV NUMBER(19,0) DEFAULT 0;
 ALTER TABLE DBXNET.SLBK_D MODIFY 	TEILEBEZ1 VARCHAR2(100);
 ALTER TABLE DBXNET.SLBK_D MODIFY LI_TER_TAG_2 NUMBER(10,0) DEFAULT 0;
 ALTER TABLE DBXNET.SLBK_D MODIFY GBUB VARCHAR2(2);--TODO: why we are modifying these fields?
 --	"VK_PR_FW" NUMBER(11,2) NOT NULL ENABLE, 
--	"NET_PR_FW" NUMBER(11,2) NOT NULL ENABLE,
--------------------------------------------------------------
ALTER TABLE DBXNET.SLBK_D MODIFY  VK_PR_FW NUMBER(11,2);
------------------------------------------------------------------
BEGIN
FOR I IN (SELECT ORDAT_SEQUENCE, VK_PR_FW FROM DBXNET.SLBK_D_BCK) 
LOOP
UPDATE DBXNET.SLBK_D SET VK_PR_FW = I.VK_PR_FW WHERE ORDAT_SEQUENCE = I.ORDAT_SEQUENCE;
END LOOP;
END;

COMMIT;
-----------------------------------------------------------------
COMMIT;
-----------------------------------------------------------------
ALTER TABLE DBXNET.SLBK_D MODIFY NET_PR_FW NULL;
UPDATE DBXNET.SLBK_D SET NET_PR_FW = NULL;
------------------------------------------------------------------
ALTER TABLE DBXNET.SLBK_D MODIFY  NET_PR_FW NUMBER(11,2);
------------------------------------------------------------------
BEGIN
FOR I IN (SELECT ORDAT_SEQUENCE, NET_PR_FW FROM DBXNET.SLBK_D_BCK) 
LOOP
UPDATE DBXNET.SLBK_D SET NET_PR_FW = I.NET_PR_FW WHERE ORDAT_SEQUENCE = I.ORDAT_SEQUENCE;
END LOOP;
END;
-----------------------------------------------------------------
COMMIT;
----------------------------------------------------------------
DROP TABLE DBXNET.SLBK_D_BCK;
----------------------------------------------------------------
ALTER TABLE DBXNET.SLBK_D ADD (SAP_CUST_NUMBER VARCHAR2(200), 
	SALES_ORG VARCHAR2(45));
-----------------------------------------------------------------
DROP INDEX MTD_SLBK_D_I01;


-----------------------------------------------------------------
CREATE UNIQUE INDEX "DBXNET"."MTD_SLBK_D_I04" ON "DBXNET"."SLBK_D" ("BENUTZERX12", "SAP_CUST_NUMBER", "TEILENR", "UTNR") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
------------------------------------------------------------------
CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."SLBK_DV" ("BENUTZERX12", "FA_NR", "KTO_NR", "TEILENR", "ALTE_TEILENR", "UTNR", "POS_ART_KZ", "VKBEREICH", "SET_MENGE", "AUF_MENGE", "VKEH", "VK_PR_FW", "NET_PR_FW", "BEMERKUNG", "LETZT_AEND", "STATUS_KZ", "KENNZLX4", "VG_NR_LG3", "TIMESTAMP_RESV", "LORT", "GBUB", "PREISLISTE", "ORDAT_SEQUENCE", "SAP_CUST_NUMBER", "SALES_ORG") AS 
  SELECT
BENUTZERX12,
FA_NR,
KTO_NR,
TEILENR,
ALTE_TEILENR,
UTNR,
POS_ART_KZ,
VKBEREICH,
SET_MENGE,
AUF_MENGE/1000,
VKEH/1000,
VK_PR_FW/100,
NET_PR_FW/100,
BEMERKUNG,
LETZT_AEND,
STATUS_KZ,
KENNZLX4,
VG_NR_LG3,
TIMESTAMP_RESV,
LORT,
GBUB,
PREISLISTE,
ORDAT_SEQUENCE,
SAP_CUST_NUMBER,
SALES_ORG
FROM SLBK_D;

GRANT SELECT ON "DBXNET"."SLBK_DV" TO "FOSS_SELECT";
----------------------------*****SLBK ENDS***********-------------
------------------------------------------------------------------
------------------------CATGEORY 3 ENDS---------------------------
------------------------------------------------------------------
--CATEGORY 4: BRAND NEW TABLES
CREATE TABLE "DBXNET"."GAZK_LP_D" 
   (	"TEILENR" VARCHAR2(100), 
	"LANGUAGE_CODE" CHAR(2), 
	"DESCRIPTION" VARCHAR2(200), 
	"ORDAT_SEQUENCE" NUMBER(9,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
------------------------------------------------------------------
CREATE SEQUENCE DBXNET.GAZK_LP_SEQ INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999999999999 NOCYCLE CACHE 20 NOORDER;
------------------------------------------------------------------
---------------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "DBXNET"."GAZK_LP_TRIGG" 
BEFORE INSERT ON DBXNET.GAZK_LP_D
FOR EACH ROW
BEGIN
        SELECT
                GAZK_LP_SEQ.NEXTVAL
        INTO
                :NEW.ORDAT_SEQUENCE
        FROM
                DUAL;
END;
----------------------------------------------------------------
ALTER TRIGGER "DBXNET"."GAZK_LP_TRIGG" ENABLE;
------------------------------------------------------------------

CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBXNET"."GAZK_LP_DV" ("TEILENR", "LANGUAGE_CODE", "DESCRIPTION", "ORDAT_SEQUENCE") AS 
  SELECT TEILENR, LANGUAGE_CODE, DESCRIPTION, ORDAT_SEQUENCE
FROM DBXNET.GAZK_LP_D;
------------------------------------------------------------------
CREATE OR REPLACE NONEDITIONABLE TRIGGER "DBXNET"."LOG_ERR_TABLE_TRIGG" 
BEFORE INSERT ON DBXNET.LOG_ERR_TABLE
FOR EACH ROW
BEGIN
        SELECT
                LOG_ERROR_SEQ.NEXTVAL
        INTO
                :NEW.ERROR_NUMBER
        FROM
                DUAL;
SELECT
        SYSDATE
INTO
        :NEW.ERROR_DATE
FROM
        DUAL;
END;
-----------------------------------------------------------------
ALTER TRIGGER "DBXNET"."LOG_ERR_TABLE_TRIGG" ENABLE;
------------------------------------------------------------------

CREATE TABLE "DBXNET"."MATERIALMASTER" 
   (	"PARTS_NUMBER" VARCHAR2(100), 
	"DELETION_INDICATOR" VARCHAR2(100), 
	"MATRIAL_TYPE" VARCHAR2(100), 
	"BRAND_DESCRIPTION" VARCHAR2(100), 
	"EAN_NUMBER" VARCHAR2(100), 
	"OLD_MATERIAL_NUMBER" VARCHAR2(100), 
	"BASIC_MATERIAL" VARCHAR2(100), 
	"PRODUCT_HIERARCHY" VARCHAR2(100), 
	"DISTRIBUTION_CHANNEL" VARCHAR2(100), 
	"UOM" VARCHAR2(100), 
	"MATMAST_SEQUENCE" NUMBER(9,0) DEFAULT 0 NOT NULL ENABLE, 
	"IS_ACTIVE" VARCHAR2(100), 
	"BRAND_CODE" NUMBER(2,0), 
	 PRIMARY KEY ("PARTS_NUMBER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
 -------------------------------------------------------------
 CREATE SEQUENCE DBXNET.MATMAST_D_SEQ INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999999999999 NOCYCLE CACHE 20 NOORDER ;
 ----------------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "DBXNET"."MATMAST_D_TRIGG" 
BEFORE INSERT ON DBXNET.MATERIALMASTER
FOR EACH ROW
BEGIN
        SELECT
                MATMAST_D_SEQ.NEXTVAL
        INTO
                :NEW.MATMAST_SEQUENCE
        FROM
                DUAL;
END;
------------------------------------------------------------------
ALTER TRIGGER "DBXNET"."MATMAST_D_TRIGG" ENABLE;
-------------------------------------------------------------------

-------------------------------------------------------------------

CREATE TABLE "DBXNET"."MATERIALMASTER_LP" 
   (	"PARTS_NUMBER" VARCHAR2(100) NOT NULL ENABLE, 
	"LANGUAGE_CODE" VARCHAR2(100) NOT NULL ENABLE, 
	"PARTS_DESCRIPTION" VARCHAR2(100), 
	"MATLP_SEQ" NUMBER(9,0) DEFAULT 0 NOT NULL ENABLE, 
	 PRIMARY KEY ("PARTS_NUMBER", "LANGUAGE_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
 ------------------------------------------------------------------

ALTER TABLE "DBXNET"."MATERIALMASTER_LP" ADD CONSTRAINT "FK_MATMASTER" FOREIGN KEY ("PARTS_NUMBER")
	  REFERENCES "DBXNET"."MATERIALMASTER" ("PARTS_NUMBER") ENABLE;
-------------------------------------------------------------------
CREATE SEQUENCE DBXNET.MATLP_D_SEQ INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999999999999 NOCYCLE CACHE 20 NOORDER ;
---------------------------------------------------------------------
CREATE OR REPLACE EDITIONABLE TRIGGER "DBXNET"."MATLP_D_TRIGG" 
BEFORE INSERT ON DBXNET.MATERIALMASTER_LP
FOR EACH ROW
BEGIN
        SELECT
                MATLP_D_SEQ.NEXTVAL
        INTO
                :NEW.MATLP_SEQ
        FROM
                DUAL;
END;

ALTER TRIGGER "DBXNET"."MATLP_D_TRIGG" ENABLE;

COMMIT;
-------------------------------------------------------------------------------------------------


  ------------------------------------------------------------

ALTER TABLE "DBXNET"."MATERIALSALESORG" ADD CONSTRAINT "FK_MATMASTER_ORG" FOREIGN KEY ("PARTS_NUMBER")
	  REFERENCES "DBXNET"."MATERIALMASTER" ("PARTS_NUMBER") ENABLE;
------------------------------------------------------------------

------------------------------------------------------------------
CREATE OR REPLACE EDITIONABLE TRIGGER "DBXNET"."MATSAL_D_TRIGG" 
BEFORE INSERT ON DBXNET.MATERIALSALESORG
FOR EACH ROW
BEGIN
        SELECT
                MATSAL_D_SEQ.NEXTVAL
        INTO
                :NEW.MATSAL_SEQ
        FROM
                DUAL;
END;
-------------------------------------------------------------------
ALTER TRIGGER "DBXNET"."MATSAL_D_TRIGG" ENABLE;
-------------------------------------------------------------------

-------------------------------------------------------------------
CREATE TABLE "DBXNET"."ORG_COMPANY_MAP" 
   (	"SAP_SALES_ORG" VARCHAR2(10), 
	"FA_NR" VARCHAR2(10)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
------------------------------------------------------------------

 CREATE TABLE "DBXNET"."BRAND" 
   (	"CODE" NUMBER(2,0) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(200) NOT NULL ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
--------------------------------------------------------------------
CREATE TABLE "DBXNET"."CREDITRECEIVABLES"  
   (	"SAP_CUST_NUMBER" VARCHAR2(200), 
	"DOC_NUMBER" VARCHAR2(100), 
	"DOC_DATE" VARCHAR2(9), 
	"AMOUNT" VARCHAR2(100), 
	"CURRENCY" VARCHAR2(20), 
	"TRX_TYPE" VARCHAR2(10), 
	"DOC_TYPE" VARCHAR2(10), 
	"ASSIGNMENT_NUM" VARCHAR2(100), 
	"NET_DUE_DATE" VARCHAR2(9), 
	"INSERT_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"CREDIT_SEQ" NUMBER(9,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
-------------------------------------------------------------------
CREATE SEQUENCE DBXNET.CRED_D_SEQ INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999999999999 NOCYCLE CACHE 20 NOORDER ;
--------------------------------------------------------------------


CREATE OR REPLACE EDITIONABLE TRIGGER "DBXNET"."CRED_D_TRIGG" 
BEFORE INSERT ON DBXNET.CREDITRECEIVABLES
FOR EACH ROW
BEGIN
        SELECT
                CRED_D_SEQ.NEXTVAL
        INTO
                :NEW.CREDIT_SEQ
        FROM
                DUAL;
END;
--------------------------------------------------------------------
ALTER TRIGGER "DBXNET"."CRED_D_TRIGG" ENABLE;
--------------------------------------------------------------------

CREATE TABLE "DBXNET"."CREDITRECEIVABLES_B" 
   (	"SAP_CUST_NUMBER" VARCHAR2(200), 
	"DOC_NUMBER" VARCHAR2(100), 
	"DOC_DATE" VARCHAR2(9), 
	"AMOUNT" VARCHAR2(100), 
	"CURRENCY" VARCHAR2(20), 
	"TRX_TYPE" VARCHAR2(10), 
	"DOC_TYPE" VARCHAR2(10), 
	"ASSIGNMENT_NUM" VARCHAR2(100), 
	"NET_DUE_DATE" VARCHAR2(9), 
	"INSERT_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
--------------------------------------------------------------------

CREATE TABLE "DBXNET"."CREDITRECEIVABLES_T" 
   (	"SAP_CUST_NUMBER" VARCHAR2(200), 
	"DOC_NUMBER" VARCHAR2(100), 
	"DOC_DATE" VARCHAR2(9), 
	"AMOUNT" VARCHAR2(100), 
	"CURRENCY" VARCHAR2(20), 
	"TRX_TYPE" VARCHAR2(10), 
	"DOC_TYPE" VARCHAR2(10), 
	"ASSIGNMENT_NUM" VARCHAR2(100), 
	"NET_DUE_DATE" VARCHAR2(9), 
	"INSERT_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
------------------------------------------------------------------

CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBXNET"."CREDIT_RECEIVABLES_V" ("SAP_CUST_NUMBER", "DOC_NUMBER", "DOC_DATE", "AMOUNT", "CURRENCY", "TRX_TYPE", "DOC_TYPE", "ASSIGNEMNET_NUM", "NET_DUE_DATE", "CREDIT_SEQ") AS 
  SELECT DISTINCT
        NVL (CR.SAP_CUST_NUMBER, B.SAP_CUST_NUMBER),
        NVL (CR.DOC_NUMBER, B.DOC_NUMBER)          ,
        NVL (CR.DOC_DATE, B.DOC_DATE)              ,
        NVL (CR.AMOUNT, B.AMOUNT)                  ,
        NVL (CR.CURRENCY, B.CURRENCY)              ,
        NVL (CR.TRX_TYPE, B.TRX_TYPE)              ,
        NVL (CR.DOC_TYPE, B.DOC_TYPE)              ,
        NVL (CR.ASSIGNMENT_NUM, B.ASSIGNMENT_NUM)  ,
        NVL (CR.NET_DUE_DATE, B.NET_DUE_DATE)      ,
        CR.CREDIT_SEQ
FROM
        DBXNET.CREDITRECEIVABLES_B B
FULL JOIN
        DBXNET.CREDITRECEIVABLES CR
ON
        CR.SAP_CUST_NUMBER = B.SAP_CUST_NUMBER
ORDER BY
        CR.CREDIT_SEQ DESC;
--------------------------------------------------------------------
CREATE TABLE "DBXNET"."CUST_BRAND" 
   (	"SAP_CUST_NUMBER" VARCHAR2(200) NOT NULL ENABLE, 
	"BRAND_CODE" NUMBER(2,0) NOT NULL ENABLE, 
	"CUST_B_SEQ" NUMBER(9,0) NOT NULL ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
 ------------------------------------------------------------------
 CREATE SEQUENCE DBXNET.CUST_BRAND_SEQ INCREMENT BY 1 MINVALUE 1 MAXVALUE 999999999999999999999999999 NOCYCLE CACHE 20 NOORDER ;
 ------------------------------------------------------------------
 

CREATE OR REPLACE EDITIONABLE TRIGGER "DBXNET"."CUSTBRAND_D_TRIGG" 
BEFORE INSERT ON "DBXNET"."CUST_BRAND"
FOR EACH ROW
BEGIN
        SELECT
                CUST_BRAND_SEQ.NEXTVAL
        INTO
                :NEW.CUST_B_SEQ
        FROM
                DUAL;
END;
-------------------------------------------------------------------
ALTER TRIGGER "DBXNET"."CUSTBRAND_D_TRIGG" ENABLE;
------------------------------------------------------------------
CREATE TABLE "DBXNET"."TEMP" 
   (	"KTO_NR" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
 --------------------------------------------------------------
 CREATE TABLE "DBXNET"."SAPCUST_KTO_MAP" 
   (	"KTO_NR" NUMBER(10,0), 
	"FA_NR" VARCHAR2(100), 
	"SALES_ORG" VARCHAR2(100), 
	"SAP_CUST_NUMBER" VARCHAR2(100), 
	"ORDAT_SEQUENCE" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"FA_KTO_NR" VARCHAR2(14)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;


-------------------------------------------------------------------
-- DBXNET.IGAK_POP_B definition

CREATE TABLE "DBXNET"."IGAK_POP_B" 
   (	"ORDERID" NUMBER(10,0) NOT NULL ENABLE, 
	"SAP_CUST_NUMBER" VARCHAR2(200), 
	"KTO_NR" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
  
  ----------------------------------------------------------
-- DBXNET.NRPM_SAP_D definition

CREATE TABLE "DBXNET"."NRPM_SAP_D" 
   (	"LKZ" VARCHAR2(10), 
	"SAP_COUNTRY_CODE" VARCHAR2(10)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
  ---------------------------------------------------------------------------
  CREATE UNIQUE INDEX "DBXNET"."CREDIT_CONSTRAINT" ON "DBXNET"."CREDITRECEIVABLES_T" ("DOC_NUMBER", "AMOUNT", "INSERT_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
  ----------------------------------------------------------------------------------------
-----changed CR logic------------------------------------------------
-- DBXNET.CREDITRECEIVABLES_DUMP definition

CREATE TABLE "DBXNET"."CREDITRECEIVABLES_DUMP" 
   (	"SAP_CUST_NUMBER" VARCHAR2(200), 
	"DOC_NUMBER" VARCHAR2(100), 
	"DOC_DATE" VARCHAR2(9), 
	"AMOUNT" VARCHAR2(100), 
	"CURRENCY" VARCHAR2(20), 
	"TRX_TYPE" VARCHAR2(10), 
	"DOC_TYPE" VARCHAR2(10), 
	"ASSIGNMENT_NUM" VARCHAR2(100), 
	"NET_DUE_DATE" VARCHAR2(9), 
	"INSERT_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
  --------------------------------------------------------------------------------------
  CREATE OR REPLACE PACKAGE DBXNET.CREDIT_RECEIVABLES
AS
        PROCEDURE POPULATE_CR_BACK_UP;
        PROCEDURE POPULATE_CR;
END CREDIT_RECEIVABLES;

CREATE OR REPLACE PACKAGE BODY DBXNET.CREDIT_RECEIVABLES
AS
        /*
        PURPOSE:      PACKAGE HANDLES CR LOGIC
        REMARKS:
        WHO     DATE        DESCRIPTION
        ------  ----------  --------------------------------
        SUKRIT   12.07.2023  CREATED
        */
        PROCEDURE POPULATE_CR_BACK_UP AS CR_COUNT NUMBER(9,0);
        B_COUNT                                   NUMBER(9,0);
                BEGIN
                        EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = DBXNET';
                        SELECT
                                COUNT (*)
                        INTO
                                CR_COUNT
                        FROM
                                DBXNET.CREDITRECEIVABLES;
                        IF
                                CR_COUNT > 0
                        THEN
                                DBMS_OUTPUT.PUT_LINE ('DATA PRESENT IN MAIN TABLE');
                                EXECUTE IMMEDIATE 'TRUNCATE TABLE DBXNET.CREDITRECEIVABLES_B';
                                INSERT INTO
                                        DBXNET.CREDITRECEIVABLES_B
                                                (
                                                        SAP_CUST_NUMBER,
                                                        DOC_NUMBER     ,
                                                        DOC_DATE       ,
                                                        AMOUNT         ,
                                                        CURRENCY       ,
                                                        TRX_TYPE       ,
                                                        DOC_TYPE       ,
                                                        ASSIGNMENT_NUM ,
                                                        NET_DUE_DATE
                                                )
                                SELECT
                                        SAP_CUST_NUMBER,
                                        DOC_NUMBER     ,
                                        DOC_DATE       ,
                                        AMOUNT         ,
                                        CURRENCY       ,
                                        TRX_TYPE       ,
                                        DOC_TYPE       ,
                                        ASSIGNMENT_NUM ,
                                        NET_DUE_DATE
                                FROM
                                        DBXNET.CREDITRECEIVABLES;
                                SELECT
                                        COUNT(*)
                                INTO
                                        B_COUNT
                                FROM
                                        DBXNET.CREDITRECEIVABLES_B;
                                IF
                                        CR_COUNT = B_COUNT
                                THEN
                                        DBMS_OUTPUT.PUT_LINE ('COUNT OF CR TABLE = COUNT OF BACKUP TABLE');
                                        EXECUTE IMMEDIATE 'TRUNCATE TABLE DBXNET.CREDITRECEIVABLES';
                                        COMMIT;
                                ELSE
                                        EXECUTE IMMEDIATE Q'[INSERT INTO DBXNET.LOG_ERR_TABLE(ERROR_MESSAGE) VALUES('COUNT OF MAIN TABLE <> BACKUP TABLE')]';
                                        COMMIT;
                                END IF;
                        ELSE
                                EXECUTE IMMEDIATE Q'[INSERT INTO DBXNET.LOG_ERR_TABLE(ERROR_MESSAGE) VALUES('NO DATA IN MAIN TABLE')]';
                                COMMIT;
                        END IF;
                EXCEPTION
                        -- HANDLES ALL ERRORS
                        WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('EXCEPTION IN POPULATE_CR_BACK_UP');
                        EXECUTE IMMEDIATE Q'[INSERT INTO DBXNET.LOG_ERR_TABLE(ERROR_MESSAGE) VALUES('ISSUE IN POPULATE_CR_BACK_UP')]';
                        COMMIT;
                END POPULATE_CR_BACK_UP;
        -----------------------------------------------------------
        PROCEDURE POPULATE_CR AS T_COUNT NUMBER(9,0);
        CR_COUNT                         NUMBER(9,0);
                BEGIN
                        EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = DBXNET';
                        SELECT
                                COUNT (*)
                        INTO
                                T_COUNT
                        FROM
                                DBXNET.CREDITRECEIVABLES_T T
                        WHERE
                                TO_CHAR(T.INSERT_DATE, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD');
                        INSERT INTO
                                DBXNET.CREDITRECEIVABLES
                                        (
                                                SAP_CUST_NUMBER,
                                                DOC_NUMBER     ,
                                                DOC_DATE       ,
                                                AMOUNT         ,
                                                CURRENCY       ,
                                                TRX_TYPE       ,
                                                DOC_TYPE       ,
                                                ASSIGNMENT_NUM ,
                                                NET_DUE_DATE
                                        )
                        SELECT
                                SAP_CUST_NUMBER,
                                DOC_NUMBER     ,
                                DOC_DATE       ,
                                AMOUNT         ,
                                CURRENCY       ,
                                TRX_TYPE       ,
                                DOC_TYPE       ,
                                ASSIGNMENT_NUM ,
                                NET_DUE_DATE
                        FROM
                                DBXNET.CREDITRECEIVABLES_T T
                        WHERE
                                TO_CHAR(T.INSERT_DATE, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD');
                        SELECT
                                COUNT(*)
                        INTO
                                CR_COUNT
                        FROM
                                DBXNET.CREDITRECEIVABLES M
                        WHERE
                                TO_CHAR(M.INSERT_DATE, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD');
                        IF
                                T_COUNT = CR_COUNT
                        THEN
                                DBMS_OUTPUT.PUT_LINE ('COUNT OF TEMP TABLE = COUNT OF CR TABLE');
								         INSERT INTO
                          DBXNET.CREDITRECEIVABLES_DUMP
                                        (
                                                SAP_CUST_NUMBER,
                                                DOC_NUMBER     ,
                                                DOC_DATE       ,
                                                AMOUNT         ,
                                                CURRENCY       ,
                                                TRX_TYPE       ,
                                                DOC_TYPE       ,
                                                ASSIGNMENT_NUM ,
                                                NET_DUE_DATE
                                        )
                        SELECT
                                SAP_CUST_NUMBER,
                                DOC_NUMBER     ,
                                DOC_DATE       ,
                                AMOUNT         ,
                                CURRENCY       ,
                                TRX_TYPE       ,
                                DOC_TYPE       ,
                                ASSIGNMENT_NUM ,
                                NET_DUE_DATE
                        FROM
                                DBXNET.CREDITRECEIVABLES_T T
                        WHERE
                                TO_CHAR(T.INSERT_DATE, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD');
                                EXECUTE IMMEDIATE 'TRUNCATE TABLE DBXNET.CREDITRECEIVABLES_T';
								EXECUTE IMMEDIATE Q'['DELETE FROM DBXNET.CREDITRECEIVABLES_DUMP WHERE TO_CHAR(SYSDATE, 'DDMMYYYY') - TO_CHAR(CURRENT_TIMESTAMP, 'DDMMYYYY') > 30']';
                                COMMIT;
                        ELSE
                                EXECUTE IMMEDIATE Q'[INSERT INTO DBXNET.LOG_ERR_TABLE(ERROR_MESSAGE) VALUES('COUNT OF TEMP TABLE <> MAIN TABLE ERROR IN INSERTION')]';
                                COMMIT;
                        END IF;
                EXCEPTION
                        -- HANDLES ALL ERRORS
                        WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('EXCEPTION IN POPULATE_CR');
                        EXECUTE IMMEDIATE Q'[INSERT INTO DBXNET.LOG_ERR_TABLE(ERROR_MESSAGE) VALUES('ISSUE IN POPULATE_CR')]';
                        COMMIT;
                END POPULATE_CR;
END CREDIT_RECEIVABLES;
---------------------------------------------------------------------------------------
--view
-- DBXNET.CREDIT_RECEIVABLES_V source

CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "DBXNET"."CREDIT_RECEIVABLES_V" ("SAP_CUST_NUMBER", "DOC_NUMBER", "DOC_DATE", "AMOUNT", "CURRENCY", "TRX_TYPE", "DOC_TYPE", "ASSIGNEMNET_NUM", "NET_DUE_DATE", "CREDIT_SEQ") AS 
  SELECT DISTINCT
        NVL (CR.SAP_CUST_NUMBER, B.SAP_CUST_NUMBER),
        NVL (CR.DOC_NUMBER, B.DOC_NUMBER)          ,
        NVL (CR.DOC_DATE, B.DOC_DATE)              ,
        NVL (CR.AMOUNT, B.AMOUNT)                  ,
        NVL (CR.CURRENCY, B.CURRENCY)              ,
        NVL (CR.TRX_TYPE, B.TRX_TYPE)              ,
        NVL (CR.DOC_TYPE, B.DOC_TYPE)              ,
        NVL (CR.ASSIGNMENT_NUM, B.ASSIGNMENT_NUM)  ,
        NVL (CR.NET_DUE_DATE, B.NET_DUE_DATE),
        CR.CREDIT_SEQ
FROM
        DBXNET.CREDITRECEIVABLES_B B
FULL JOIN
        DBXNET.CREDITRECEIVABLES CR
ON
        CR.SAP_CUST_NUMBER = B.SAP_CUST_NUMBER;
---------------------------------------------------------------------------------------------------------

---SCHEDULER:

BEGIN 
   dbms_scheduler.create_job ( 
    job_name => 'POPULATE_CR_BACK', 
    job_type => 'PLSQL_BLOCK', 
    job_action => 'DECLARE BEGIN DBXNET.CREDIT_RECEIVABLES.POPULATE_CR_BACK_UP(); END;', 
    start_date => SYSTIMESTAMP, 
    enabled => true, 
    repeat_interval => 'FREQ=DAILY; byhour=14; byminute=0; bysecond=0;'
   ); 
END;
-------------------------------------------------------------------------------------------------
BEGIN 
   dbms_scheduler.create_job ( 
    job_name => 'POPULATE_CR_MAIN', 
    job_type => 'PLSQL_BLOCK', 
    job_action => 'DECLARE BEGIN DBXNET.CREDIT_RECEIVABLES.POPULATE_CR(); END;', 
    start_date => SYSTIMESTAMP, 
    enabled => true, 
    repeat_interval => 'FREQ=DAILY; byhour=15; byminute=0; bysecond=0;'
   ); 
END;
----------------------------------------------------------------------------------------------------
SELECT LOG_DATE, JOB_NAME, STATUS, RUN_DURATION
FROM DBA_SCHEDULER_JOB_RUN_DETAILS WHERE JOB_NAME='POPULATE_CR_MAIN';
--OR STATUS='FAILED';

SELECT * FROM ALL_SCHEDULER_JOBS; --FOR A LIST OF ALL SCHEDULER JOBS.
--SELECT * FROM DBA_SCHEDULER_JOBS’ IF YOU HAVE DBA PRIVILEGES
-----------------------------------------------------------------------------------------------------
BEGIN
   dbms_scheduler.run_job('POPULATE_CR_MAIN');
END;
----------------------------------------------------------------------------------------------------
DECLARE
        BEGIN
                DBXNET.CREDIT_RECEIVABLES.POPULATE_CR();
                
        END;
-----------------------------------------------------------------------------------------------------------
BEGIN
  dbms_scheduler.drop_job(job_name => 'POPULATE_CR_MAIN');
END;
-----------------------------------------------------------------------------------------------------
-- DBXNET.DFLN_MTD_DV source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "DBXNET"."DFLN_MTD_DV" ("LISTUNG", "YEAR_ID", "ARTIKELNR", "ARTIKELBEZ1_DE", "ARTIKELBEZ1_EN", "ARTIKELBEZ1_FR", "EAN_NR", "REF_NR", "SORTNR10_1", "SORTNR10_2", "SORTNR10_3", "SORTNR10_4", "SORTNR10_5", "SORTNR10_6", "SORTNR10_7", "SORTNR10_8", "SORTNR10_9", "SORTNR10_10", "TXID_HL", "SORTNR_HL", "SORTNR_CA", "TXID_CA", "VK_PR_FW", "XN_NET_PR_KZ", "VKWG", "CONDGROUP", "PROD_RANGE_X8", "SUBPRODUCTGROUP", "PR_IDENT", "BRAND_ID", "PL_IDENT", "BM_IDENT", "PLOPIM_IDENT", "RHM_IDENT", "SERIES", "UMS_REF_NR", "MULTIPLIKATOR", "ZUSATZRABATT", "MINBESTELLMENGE", "ZB_KZ", "VK_EH", "STATUS_TYPE", "KEINE_KOND_KALK", "GRP_VFG", "GRP_ASG", "PROF_POOL_PROD", "RAB_ART", "FB_RAB_KZ", "GBUB", "STAT_KZ", "ORDAT_SEQUENCE", "CIP_ID", "CIP_CATALOG", "ARTIKELBEZ1_NL") AS 
  SELECT LISTUNG,
           YEAR_ID,
           ARTIKELNR,
           ARTIKELBEZ1_DE,
           ARTIKELBEZ1_EN,
           ARTIKELBEZ1_FR,
           EAN_NR,
           REF_NR,
           SORTNR10_1,
           SORTNR10_2,
           SORTNR10_3,
           SORTNR10_4,
           SORTNR10_5,
           SORTNR10_6,
           SORTNR10_7,
           SORTNR10_8,
           SORTNR10_9,
           SORTNR10_10,
           TXID_HL,
           SORTNR_HL,
           SORTNR_CA,
           TXID_CA,
           VK_PR_FW / 100,
           XN_NET_PR_KZ,
           VKWG,
           condgroup,
           PROD_RANGE_X8,
           subproductgroup,
           PR_IDENT,
           BRAND_ID,
           PL_IDENT,
           BM_IDENT,
           PLOPIM_IDENT,
           RHM_IDENT,
           SERIES,
           UMS_REF_NR,
           MULTIPLIKATOR,
           ZUSATZRABATT,
           MINBESTELLMENGE,
           ZB_KZ,
           VK_EH,
           STATUS_TYPE,
           KEINE_KOND_KALK,
           GRP_VFG,
           GRP_ASG,
           PROF_POOL_PROD,
           RAB_ART,
           FB_RAB_KZ,
           GBUB,
           STAT_KZ,
           ORDAT_SEQUENCE,
           CIP_ID,
           CIP_CATALOG,
           ARTIKELBEZ1_NL
      FROM DFLN_D;

GRANT SELECT ON "DBXNET"."DFLN_MTD_DV" TO "FOSS_SELECT";
------------------------------------------------------------------------------------------
--MAT VIEW------
-- DBXNET.MV_UMS01_MTD source

-- DBXNET.MV_UMS02_MTD source

--DROP MATERIALIZED VIEW "DBXNET"."MV_UMS02_MTD";

CREATE MATERIALIZED VIEW "DBXNET"."MV_UMS02_MTD" ("VERT_NR1", "VERT_NR2", "FA_NR", "KTO_NR", "BEZ1", "STR", "PLZ_LA", "ZIPCODE", "ORT", "TEL", "FAX", "BRA_SL_1", "BRA_SL_2", "BRA_SL_3", "BRA_SL_4", "SAP_CUST_NUMBER", "BRA_SL_5", "MATCHCODE", "KDGR", "WG_IDENT", "PR_IDENT", "PL_IDENT", "REF_NR", "UNTERKLASSE", "GBUB", "UMS_KZ", "KL_KZ", "AUFART_KZ", "VKWG", "AUFTR_KANAL", "TEILENR", "TNRDUMMY", "UMS_REF_NR", "DATUM", "STAT_MENGE", "GES_WERT_FW", "ORDAT_SEQUENCE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 0 INITRANS 2 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" 
  BUILD DEFERRED
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE ON QUERY COMPUTATION DISABLE QUERY REWRITE
  AS SELECT kdu.vert_nr1,
         kdu.vert_nr2,
         umsd.fa_nr,
         umsd.kto_nr,
         kdu.bez1,
         kdu.str,
         kdu.plz_la,
         kdu.zipcode,
         kdu.ort,
         kd01.TEL_TAB6_1                  AS tel,
         kd01.TEL_TAB6_3                  AS fax,
         kd01.BRA_SL_1,
         kd01.BRA_SL_2,
         kd01.BRA_SL_3,
         kd01.BRA_SL_4,
         kd01.BRA_SL_5,
		 kd01.SAP_CUST_NUMBER,
         kdu.matchcode,
         kdu.kdgr,
         wg_ident,
         pr_ident,
         pl_ident,
         ref_nr,
         unterklasse,
         SUBSTR (umsd.fa_gubkto, 7, 2)    AS gbub,
         (CASE
              WHEN SUBSTR (umsd.fa_gubkto, 7, 1) = '5'
              THEN
                  'ET'
              WHEN SUBSTR (umsd.fa_gubkto, 7, 1) = 'K'
              THEN
                  'KD'
              WHEN SUBSTR (umsd.fa_gubkto, 7, 1) = '4'
              THEN
                  'RM'
              WHEN     SUBSTR (pr_ident, 1, 2) >= '10'
                   AND SUBSTR (pr_ident, 1, 2) <= '80'
              THEN
                  'FW'
              ELSE
                  ' '
          END)                            UMS_KZ,
         umsd.kl_kz,
         umsd.aufart_kz,
         umsd.VKWG,
         umsd.auftr_kanal,
         umsd.teilenr,
         umsd.tnrdummy,
         umsd.ums_ref_nr,
         umsd.datum,
         SUM (menge / 1000)               AS stat_menge,
         SUM (ges_wert_fw / 100)          AS ges_wert_fw,
         MIN (umsd.ordat_sequence)        AS ordat_sequence
    FROM dbstmt.umsd_d umsd,
         dbstmt.kdu_m kdu,
         dbstmt.tnst_m tnst,
         DBXNET.kd01_d kd01
   WHERE     kdu.fa_gubkto = umsd.fa_gubkto
         AND kd01.FA_KTO_NR = kdu.FA_KTO_NR
         AND tnst.teilenr = umsd.teilenr
         AND UMSD.SATZART = 'UM'
         AND UMSD.KL_KZ = '0'
GROUP BY kdu.vert_nr1,
         kdu.vert_nr2,
         umsd.fa_nr,
         umsd.kto_nr,
         kdu.bez1,
         kdu.str,
         kdu.plz_la,
         kdu.zipcode,
         kdu.ort,
         kd01.TEL_TAB6_1,
         kd01.TEL_TAB6_1,
         kd01.TEL_TAB6_3,
         kd01.BRA_SL_1,
         kd01.BRA_SL_2,
         kd01.BRA_SL_3,
         kd01.BRA_SL_4,
         kd01.BRA_SL_5,
         kd01.SAP_CUST_NUMBER,
         kdu.matchcode,
         kdu.kdgr,
         wg_ident,
         pr_ident,
         pl_ident,
         ref_nr,
         unterklasse,
         SUBSTR (umsd.fa_gubkto, 7, 2),
         (CASE
              WHEN SUBSTR (umsd.fa_gubkto, 7, 1) = '5'
              THEN
                  'ET'
              WHEN SUBSTR (umsd.fa_gubkto, 7, 1) = 'K'
              THEN
                  'KD'
              WHEN SUBSTR (umsd.fa_gubkto, 7, 1) = '4'
              THEN
                  'RM'
              WHEN     SUBSTR (pr_ident, 1, 2) >= '10'
                   AND SUBSTR (pr_ident, 1, 2) <= '80'
              THEN
                  'FW'
              ELSE
                  ' '
          END),
         umsd.kl_kz,
         umsd.aufart_kz,
         umsd.vkwg,
         umsd.auftr_kanal,
         umsd.teilenr,
         umsd.tnrdummy,
         umsd.ums_ref_nr,
         umsd.datum
  HAVING SUM (umsd.menge) <> 0 OR SUM (ges_wert_fw) <> 0;

COMMENT ON MATERIALIZED VIEW DBXNET.MV_UMS02_MTD IS 'snapshot table for snapshot DBXNET.MV_UMS02_MTD';

ALTER MATERIALIZED VIEW "DBXNET"."MV_UMS02_MTD" MODIFY (SAP_CUST_NUMNER VARCHAR2(200));

alter materialized view "DBXNET"."MV_UMS02_MTD" modify (SAP_CUST_NUMBER varchar2(200));
--------------------------------------------------------------------------------------------

CREATE UNIQUE INDEX "DBXNET"."CREDIT_CONSTRAINT" ON "DBXNET"."CREDITRECEIVABLES_T" ("SAP_CUST_NUMBER","DOC_NUMBER", "ASSIGNMENT_NUM") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "ORDAT_TABLESPACE" ;
 
 COMMIT;
 
 ALTER TABLE "DBXNET"."CREDITRECEIVABLES_T" DROP CONSTRAINT CREDIT_CONSTRAINT;
 ----------------------------------------------------------------------------------------
 --MATERIAL DESCRIPTION QUERY

 SELECT SUBSTR(TRIM(TEILENR_SPRKZ), 1, 8) AS TEILENR, SUBSTR(TRIM(TEILENR_SPRKZ),11, 2) AS LANGUAGE_CODE,
TEXT_X30 AS DESCRIPTION
FROM DBUSHU.TTX_DV WHERE SUBSTR(TRIM(TEILENR_SPRKZ), 1, 8) IN (SELECT TRIM(TEILENR) FROM DBXNET.GAZK_D)
AND TEXTIND = 1 AND SUBSTR(TRIM(TEILENR_SPRKZ),11, 2) IN ('01','05', '03', '02');

SELECT * FROM DBUSHU.TTX_DV WHERE TRIM(TEILENR_SPRKZ)  LIKE '9999%.%' AND TEXTIND = 1;
SELECT SUBSTR(TRIM(TEILENR_SPRKZ),11, 2) FROM DBUSHU.TTX_DV WHERE TRIM(TEILENR_SPRKZ) LIKE '9999%.%' AND TEXTIND = 1;

SELECT * FROM DBXNET.GAZK_LP_D WHERE TEILENR  IN (SELECT SUBSTR(TRIM(TEILENR_SPRKZ), 1, 8) FROM DBUSHU.TTX_DV );


SELECT * FROM DBUSHU.TTX_DV WHERE SUBSTR(TRIM(TEILENR_SPRKZ), 1, 8) IN (SELECT TRIM(TEILENR) FROM DBXNET.GAZK_D)
AND TEXTIND = 1 AND SUBSTR(TRIM(TEILENR_SPRKZ),11, 2) IN ('01','05', '03', '02');


SELECT SUBSTR(TRIM(TEILENR_SPRKZ),7, 2) FROM DBUSHU.TTX_DV WHERE TRIM(TEILENR_SPRKZ) LIKE '9999%.%' AND TEXTIND = 1;

SELECT SUBSTR(TRIM(TEILENR_SPRKZ), 1, 8) FROM DBUSHU.TTX_DV WHERE TRIM(TEILENR_SPRKZ) LIKE '9999%.%' AND TEXTIND = 1;


SELECT * FROM DBXNET.GAZK_LP_D;

DELETE 
FROM
        DBXNET.GAZK_LP_D
WHERE
        ROWID IN
        (
                SELECT
                        ROWID
                FROM
                        (
                                SELECT
                                        ROW_NUMBER() OVER
                                                          (
                                                                  PARTITION BY TRIM(TEILENR),
                                                                               TRIM(LANGUAGE_CODE),
                                                                               TRIM(DESCRIPTION)
                                                                  ORDER BY TRIM(TEILENR),
                                                                               TRIM(LANGUAGE_CODE),
                                                                               TRIM(DESCRIPTION)
                                                          )
                                        NBLINES
                                FROM
                                        DBXNET.GAZK_LP_D) T2
                WHERE
                        NBLINES > 1);
--------------------------------------------------------------------------------------

DESCRIBE DBXNET.XNVA_D;
    
ALTER TABLE DBXNET.XNVA_D DROP COLUMN PARTNER_NO;

ALTER TABLE DBXNET.XNVA_D RENAME COLUMN PARTNER_NUMBER TO PARTNER_NO;
----------------------------------------------------------------------------------------
 ALTER TABLE DBXNET.XNVA_D RENAME COLUMN PARTNER_NO TO PARTNER_NUMBER;
 ----------------------------------------------------------------------------------------
     
CREATE TABLE DBXNET.ATM_D AS SELECT * FROM DBSIII.ATM_D;
    
CREATE TABLE DBXNET.ATMB_D AS SELECT * FROM DBSIII.ATMB_D;
--------------------------------------IS_BLOCKED LOGIC----------------------------------------------------------
ALTER TABLE DBXNET.KD01_D ADD IS_BLOCKED NUMBER(1) CONSTRAINT CHECK_IS_BLOCK CHECK (IS_BLOCKED IN (0,1));
---------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE  TRIGGER "DBXNET"."BLOCK_CUST" AFTER
    INSERT OR UPDATE ON DBXNET.PERSAD_D
    REFERENCING NEW AS NEW OLD AS OLD
    FOR EACH ROW
DECLARE
SAP_CUST VARCHAR2(200);
BEGIN
IF ( :OLD.CREDIT_STATUS != :NEW.CREDIT_STATUS ) 
--AND ( :NEW.CREDIT_STATUS != NULL )
--IF  ( :NEW.CREDIT_STATUS != NULL )
    THEN
    SAP_CUST := :NEW.SAP_CUST_NUMBER;
    dbxnet.is_blocked(SAP_CUST);
 ELSE
 EXECUTE IMMEDIATE Q'[INSERT INTO DBXNET.LOG_ERR_TABLE(ERROR_MESSAGE) VALUES('ISSUE IN BLOCK CUST LOGIC')]';
 END IF;
END;
/
-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE DBXNET.IS_BLOCKED
        ( SAP_CUST VARCHAR2 )
AS
        --CUST_NUM VARCHAR2(200);
        STATUS VARCHAR2(2);
BEGIN
        /* SELECT
        SAP_CUST_NUMBER
        INTO CUST_NUM
        FROM
        DBXNET.PERSAD_D
        WHERE
        ROWID = NRID;*/
        --DBMS_OUTPUT.PUT_LINE('THE NEW ROWID=' || NRID);
        DBMS_OUTPUT.PUT_LINE('THE CUST NUMBER=' || SAP_CUST);
        SELECT
                STAT_KZ
        INTO
                STATUS
        FROM
                DBXNET.KD01_D
        WHERE
                SAP_CUST_NUMBER = SAP_CUST;
        DBMS_OUTPUT.PUT_LINE('THE STATUS=' || STATUS);
        IF
                 ( STATUS = '0' )
        THEN
                UPDATE
                        DBXNET.KD01_D
                SET
                        IS_BLOCKED = 1
                WHERE
                        SAP_CUST_NUMBER = SAP_CUST;
                -- COMMIT;
        ELSIF
                ( STATUS != '0' )
        THEN
                UPDATE
                        DBXNET.KD01_D
                SET
                        IS_BLOCKED = 0
                WHERE
                        SAP_CUST_NUMBER = SAP_CUST;
                --COMMIT;
        ELSE
                -- ROLLBACK;
                EXECUTE IMMEDIATE Q'[INSERT INTO DBXNET.LOG_ERR_TABLE(ERROR_MESSAGE) VALUES('ISSUE IN BLOCK CUST LOGIC')]';
                --COMMIT;
        END IF;
END; 


-----
SET SERVEROUTPUT ON
DECLARE 
SAP_CUST VARCHAR2(200);
BEGIN
SELECT SAP_CUST_NUMBER INTO SAP_CUST FROM DBXNET.PERSAD_D WHERE SAP_CUST_NUMBER = '0001370300';
dbxnet.is_blocked(SAP_CUST);
END;
---------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE DBXNET.BLOCK_CUST
AS
BEGIN
        FOR ITEM IN
        (
                SELECT
                        *
                FROM
                        DBXNET.PERSAD_D
                WHERE
                        SAP_CUST_NUMBER IN
                        (
                                SELECT
                                        SAP_CUST_NUMBER
                                FROM
                                        DBXNET.CREDIT_RECEIVABLES_V))
        LOOP DBMS_OUTPUT.PUT_LINE ('SAP_CUST_NUMBER = ' || ITEM.SAP_CUST_NUMBER || ', CREDIT LIMIT = ' || ITEM.LIMIT_1 || ', EXPOSURE = ' || ITEM.CREDIT_STATUS);
                IF
                        ITEM.LIMIT_1 >= TO_NUMBER(ITEM.CREDIT_STATUS)
                THEN
                        ITEM.STAT_KZ := 0;
                ELSE
                        ITEM.STAT_KZ := 1;
                END IF;
        END LOOP;
EXCEPTION
        -- Handles all errors
        WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE ('The transaction has been rolled back due to errors, please try again.');
        ROLLBACK;
END BLOCK_CUST;
------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE DBXNET.IS_BLOCKED
        ( SAP_CUST VARCHAR2 )
IS
BEGIN
        /* SELECT
        SAP_CUST_NUMBER
        INTO CUST_NUM
        FROM
        DBXNET.PERSAD_D
        WHERE
        ROWID = NRID;*/
        --DBMS_OUTPUT.PUT_LINE('THE NEW ROWID=' || NRID);
        DBMS_OUTPUT.PUT_LINE('THE CUST NUMBER=' || SAP_CUST);
		
		   FOR I IN
        (
        SELECT
                STAT_KZ
        FROM
                DBXNET.KD01_D
        WHERE
                SAP_CUST_NUMBER = SAP_CUST)
		LOOP
        DBMS_OUTPUT.PUT_LINE('THE STATUS=' || I.STAT_KZ);
        IF
                 ( I.STAT_KZ = '0' )
        THEN
                UPDATE
                        DBXNET.KD01_D
                SET
                        IS_BLOCKED = 1
                WHERE
                        SAP_CUST_NUMBER = SAP_CUST;
                -- COMMIT;
        ELSIF
                ( I.STAT_KZ != '0' )
        THEN
                UPDATE
                        DBXNET.KD01_D
                SET
                        IS_BLOCKED = 0
                WHERE
                        SAP_CUST_NUMBER = SAP_CUST;
		 ELSIF
                ( I.STAT_KZ = NULL )
        THEN
                UPDATE
                        DBXNET.KD01_D
                SET
                        IS_BLOCKED = 0
                WHERE
                        SAP_CUST_NUMBER = SAP_CUST;
                --COMMIT;
        ELSE
                -- ROLLBACK;
                EXECUTE IMMEDIATE Q'[INSERT INTO DBXNET.LOG_ERR_TABLE(ERROR_MESSAGE) VALUES('ISSUE IN BLOCK CUST LOGIC SP')]';
                --COMMIT;
        END IF;
		END LOOP;
END;
---------------------------------------------------------------------------------------------------